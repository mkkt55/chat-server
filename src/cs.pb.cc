// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs.proto

#include "cs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_join_settings_cs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_room_settings_cs_2eproto;
namespace main {
class login_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<login_req> _instance;
} _login_req_default_instance_;
class login_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<login_resp> _instance;
} _login_resp_default_instance_;
class get_all_room_list_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_all_room_list_req> _instance;
} _get_all_room_list_req_default_instance_;
class get_all_room_list_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_all_room_list_resp> _instance;
} _get_all_room_list_resp_default_instance_;
class create_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_room_req> _instance;
} _create_room_req_default_instance_;
class room_settingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<room_settings> _instance;
} _room_settings_default_instance_;
class create_room_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_room_resp> _instance;
} _create_room_resp_default_instance_;
class dismiss_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dismiss_room_req> _instance;
} _dismiss_room_req_default_instance_;
class dismiss_room_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dismiss_room_resp> _instance;
} _dismiss_room_resp_default_instance_;
class change_room_settings_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<change_room_settings_req> _instance;
} _change_room_settings_req_default_instance_;
class change_room_settings_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<change_room_settings_resp> _instance;
} _change_room_settings_resp_default_instance_;
class change_room_settings_ntfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<change_room_settings_ntf> _instance;
} _change_room_settings_ntf_default_instance_;
class join_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<join_room_req> _instance;
} _join_room_req_default_instance_;
class join_settingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<join_settings> _instance;
} _join_settings_default_instance_;
class get_room_all_member_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_room_all_member_req> _instance;
} _get_room_all_member_req_default_instance_;
class get_room_all_member_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_room_all_member_resp> _instance;
} _get_room_all_member_resp_default_instance_;
class join_room_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<join_room_resp> _instance;
} _join_room_resp_default_instance_;
class change_join_settings_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<change_join_settings_req> _instance;
} _change_join_settings_req_default_instance_;
class change_join_settings_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<change_join_settings_resp> _instance;
} _change_join_settings_resp_default_instance_;
class send_info_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<send_info_req> _instance;
} _send_info_req_default_instance_;
class send_info_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<send_info_resp> _instance;
} _send_info_resp_default_instance_;
class recv_info_ntfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<recv_info_ntf> _instance;
} _recv_info_ntf_default_instance_;
class exit_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<exit_room_req> _instance;
} _exit_room_req_default_instance_;
class exit_room_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<exit_room_resp> _instance;
} _exit_room_resp_default_instance_;
}  // namespace main
static void InitDefaultsscc_info_change_join_settings_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_change_join_settings_req_default_instance_;
    new (ptr) ::main::change_join_settings_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_change_join_settings_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_change_join_settings_req_cs_2eproto}, {
      &scc_info_join_settings_cs_2eproto.base,}};

static void InitDefaultsscc_info_change_join_settings_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_change_join_settings_resp_default_instance_;
    new (ptr) ::main::change_join_settings_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_change_join_settings_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_change_join_settings_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_change_room_settings_ntf_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_change_room_settings_ntf_default_instance_;
    new (ptr) ::main::change_room_settings_ntf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_change_room_settings_ntf_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_change_room_settings_ntf_cs_2eproto}, {
      &scc_info_room_settings_cs_2eproto.base,}};

static void InitDefaultsscc_info_change_room_settings_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_change_room_settings_req_default_instance_;
    new (ptr) ::main::change_room_settings_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_change_room_settings_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_change_room_settings_req_cs_2eproto}, {
      &scc_info_room_settings_cs_2eproto.base,}};

static void InitDefaultsscc_info_change_room_settings_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_change_room_settings_resp_default_instance_;
    new (ptr) ::main::change_room_settings_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_change_room_settings_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_change_room_settings_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_create_room_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_create_room_req_default_instance_;
    new (ptr) ::main::create_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_create_room_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_create_room_req_cs_2eproto}, {
      &scc_info_room_settings_cs_2eproto.base,}};

static void InitDefaultsscc_info_create_room_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_create_room_resp_default_instance_;
    new (ptr) ::main::create_room_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_create_room_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_create_room_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_dismiss_room_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_dismiss_room_req_default_instance_;
    new (ptr) ::main::dismiss_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dismiss_room_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dismiss_room_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_dismiss_room_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_dismiss_room_resp_default_instance_;
    new (ptr) ::main::dismiss_room_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dismiss_room_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dismiss_room_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_exit_room_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_exit_room_req_default_instance_;
    new (ptr) ::main::exit_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_room_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_exit_room_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_exit_room_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_exit_room_resp_default_instance_;
    new (ptr) ::main::exit_room_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_room_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_exit_room_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_get_all_room_list_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_get_all_room_list_req_default_instance_;
    new (ptr) ::main::get_all_room_list_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_all_room_list_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_all_room_list_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_get_all_room_list_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_get_all_room_list_resp_default_instance_;
    new (ptr) ::main::get_all_room_list_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_all_room_list_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_all_room_list_resp_cs_2eproto}, {
      &scc_info_room_settings_cs_2eproto.base,}};

static void InitDefaultsscc_info_get_room_all_member_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_get_room_all_member_req_default_instance_;
    new (ptr) ::main::get_room_all_member_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_room_all_member_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_room_all_member_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_get_room_all_member_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_get_room_all_member_resp_default_instance_;
    new (ptr) ::main::get_room_all_member_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_room_all_member_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_room_all_member_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_join_room_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_join_room_req_default_instance_;
    new (ptr) ::main::join_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_join_room_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_join_room_req_cs_2eproto}, {
      &scc_info_join_settings_cs_2eproto.base,}};

static void InitDefaultsscc_info_join_room_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_join_room_resp_default_instance_;
    new (ptr) ::main::join_room_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_join_room_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_join_room_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_join_settings_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_join_settings_default_instance_;
    new (ptr) ::main::join_settings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_join_settings_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_join_settings_cs_2eproto}, {}};

static void InitDefaultsscc_info_login_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_login_req_default_instance_;
    new (ptr) ::main::login_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_login_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_login_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_login_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_login_resp_default_instance_;
    new (ptr) ::main::login_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_login_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_login_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_recv_info_ntf_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_recv_info_ntf_default_instance_;
    new (ptr) ::main::recv_info_ntf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_recv_info_ntf_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_recv_info_ntf_cs_2eproto}, {}};

static void InitDefaultsscc_info_room_settings_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_room_settings_default_instance_;
    new (ptr) ::main::room_settings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_room_settings_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_room_settings_cs_2eproto}, {}};

static void InitDefaultsscc_info_send_info_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_send_info_req_default_instance_;
    new (ptr) ::main::send_info_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_send_info_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_send_info_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_send_info_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::main::_send_info_resp_default_instance_;
    new (ptr) ::main::send_info_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_send_info_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_send_info_resp_cs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cs_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::main::login_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::login_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::login_req, auth_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::login_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::login_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::login_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::login_resp, error_),
  PROTOBUF_FIELD_OFFSET(::main::login_resp, auth_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_req, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::get_all_room_list_resp, rooms_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::main::create_room_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::create_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::create_room_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::create_room_req, settings_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::room_settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::room_settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::room_settings, room_id_),
  PROTOBUF_FIELD_OFFSET(::main::room_settings, room_name_),
  PROTOBUF_FIELD_OFFSET(::main::room_settings, open_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::main::create_room_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::create_room_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::create_room_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::create_room_resp, new_room_id_),
  PROTOBUF_FIELD_OFFSET(::main::create_room_resp, error_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_req, room_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::dismiss_room_resp, error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_req, room_id_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_req, settings_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_resp, error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_ntf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_ntf, id_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_ntf, room_id_),
  PROTOBUF_FIELD_OFFSET(::main::change_room_settings_ntf, settings_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::join_room_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::join_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::join_room_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::join_room_req, room_id_),
  PROTOBUF_FIELD_OFFSET(::main::join_room_req, settings_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::join_settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::join_settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::join_settings, join_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_req, room_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::get_room_all_member_resp, join_names_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::main::join_room_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::join_room_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::join_room_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::join_room_resp, error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_req, settings_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::change_join_settings_resp, error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::send_info_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::send_info_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::send_info_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::send_info_req, room_id_),
  PROTOBUF_FIELD_OFFSET(::main::send_info_req, info_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::send_info_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::send_info_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::send_info_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::send_info_resp, error_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::recv_info_ntf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::recv_info_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::recv_info_ntf, id_),
  PROTOBUF_FIELD_OFFSET(::main::recv_info_ntf, room_id_),
  PROTOBUF_FIELD_OFFSET(::main::recv_info_ntf, sender_name_),
  PROTOBUF_FIELD_OFFSET(::main::recv_info_ntf, msg_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::main::exit_room_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::exit_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::exit_room_req, id_),
  PROTOBUF_FIELD_OFFSET(::main::exit_room_req, room_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::main::exit_room_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::main::exit_room_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::main::exit_room_resp, id_),
  PROTOBUF_FIELD_OFFSET(::main::exit_room_resp, error_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::main::login_req)},
  { 9, 17, sizeof(::main::login_resp)},
  { 20, 26, sizeof(::main::get_all_room_list_req)},
  { 27, 34, sizeof(::main::get_all_room_list_resp)},
  { 36, 43, sizeof(::main::create_room_req)},
  { 45, 53, sizeof(::main::room_settings)},
  { 56, 64, sizeof(::main::create_room_resp)},
  { 67, 74, sizeof(::main::dismiss_room_req)},
  { 76, 83, sizeof(::main::dismiss_room_resp)},
  { 85, 93, sizeof(::main::change_room_settings_req)},
  { 96, 103, sizeof(::main::change_room_settings_resp)},
  { 105, 113, sizeof(::main::change_room_settings_ntf)},
  { 116, 124, sizeof(::main::join_room_req)},
  { 127, 133, sizeof(::main::join_settings)},
  { 134, 141, sizeof(::main::get_room_all_member_req)},
  { 143, 150, sizeof(::main::get_room_all_member_resp)},
  { 152, 159, sizeof(::main::join_room_resp)},
  { 161, 168, sizeof(::main::change_join_settings_req)},
  { 170, 177, sizeof(::main::change_join_settings_resp)},
  { 179, 187, sizeof(::main::send_info_req)},
  { 190, 197, sizeof(::main::send_info_resp)},
  { 199, 208, sizeof(::main::recv_info_ntf)},
  { 212, 219, sizeof(::main::exit_room_req)},
  { 221, 228, sizeof(::main::exit_room_resp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_login_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_login_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_get_all_room_list_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_get_all_room_list_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_create_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_room_settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_create_room_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_dismiss_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_dismiss_room_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_change_room_settings_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_change_room_settings_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_change_room_settings_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_join_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_join_settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_get_room_all_member_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_get_room_all_member_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_join_room_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_change_join_settings_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_change_join_settings_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_send_info_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_send_info_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_recv_info_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_exit_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::main::_exit_room_resp_default_instance_),
};

const char descriptor_table_protodef_cs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010cs.proto\022\004main\"C\n\tlogin_req\022(\n\002id\030\001 \001("
  "\0162\016.main.proto_id:\014login_req_id\022\014\n\004auth\030"
  "\002 \001(\t\"d\n\nlogin_resp\022)\n\002id\030\001 \001(\0162\016.main.p"
  "roto_id:\rlogin_resp_id\022\035\n\005error\030\002 \001(\0162\016."
  "main.error_id\022\014\n\004auth\030\003 \001(\t\"M\n\025get_all_r"
  "oom_list_req\0224\n\002id\030\001 \001(\0162\016.main.proto_id"
  ":\030get_all_room_list_req_id\"s\n\026get_all_ro"
  "om_list_resp\0225\n\002id\030\001 \001(\0162\016.main.proto_id"
  ":\031get_all_room_list_resp_id\022\"\n\005rooms\030\002 \003"
  "(\0132\023.main.room_settings\"h\n\017create_room_r"
  "eq\022.\n\002id\030\001 \001(\0162\016.main.proto_id:\022create_r"
  "oom_req_id\022%\n\010settings\030\002 \001(\0132\023.main.room"
  "_settings\"G\n\rroom_settings\022\017\n\007room_id\030\001 "
  "\001(\005\022\021\n\troom_name\030\002 \001(\t\022\022\n\004open\030\003 \001(\010:\004tr"
  "ue\"w\n\020create_room_resp\022/\n\002id\030\001 \001(\0162\016.mai"
  "n.proto_id:\023create_room_resp_id\022\023\n\013new_r"
  "oom_id\030\002 \001(\005\022\035\n\005error\030\003 \001(\0162\016.main.error"
  "_id\"T\n\020dismiss_room_req\022/\n\002id\030\001 \001(\0162\016.ma"
  "in.proto_id:\023dismiss_room_req_id\022\017\n\007room"
  "_id\030\002 \001(\005\"d\n\021dismiss_room_resp\0220\n\002id\030\001 \001"
  "(\0162\016.main.proto_id:\024dismiss_room_resp_id"
  "\022\035\n\005error\030\002 \001(\0162\016.main.error_id\"\213\001\n\030chan"
  "ge_room_settings_req\0227\n\002id\030\001 \001(\0162\016.main."
  "proto_id:\033change_room_settings_req_id\022\017\n"
  "\007room_id\030\002 \001(\005\022%\n\010settings\030\003 \001(\0132\023.main."
  "room_settings\"t\n\031change_room_settings_re"
  "sp\0228\n\002id\030\001 \001(\0162\016.main.proto_id:\034change_r"
  "oom_settings_resp_id\022\035\n\005error\030\002 \001(\0162\016.ma"
  "in.error_id\"\213\001\n\030change_room_settings_ntf"
  "\0227\n\002id\030\001 \001(\0162\016.main.proto_id:\033change_roo"
  "m_settings_ntf_id\022\017\n\007room_id\030\002 \001(\005\022%\n\010se"
  "ttings\030\003 \001(\0132\023.main.room_settings\"u\n\rjoi"
  "n_room_req\022,\n\002id\030\001 \001(\0162\016.main.proto_id:\020"
  "join_room_req_id\022\017\n\007room_id\030\002 \001(\005\022%\n\010set"
  "tings\030\003 \001(\0132\023.main.join_settings\"\"\n\rjoin"
  "_settings\022\021\n\tjoin_name\030\001 \001(\t\"b\n\027get_room"
  "_all_member_req\0226\n\002id\030\001 \001(\0162\016.main.proto"
  "_id:\032get_room_all_member_req_id\022\017\n\007room_"
  "id\030\002 \001(\005\"g\n\030get_room_all_member_resp\0227\n\002"
  "id\030\001 \001(\0162\016.main.proto_id:\033get_room_all_m"
  "ember_resp_id\022\022\n\njoin_names\030\002 \003(\t\"^\n\016joi"
  "n_room_resp\022-\n\002id\030\001 \001(\0162\016.main.proto_id:"
  "\021join_room_resp_id\022\035\n\005error\030\002 \001(\0162\016.main"
  ".error_id\"z\n\030change_join_settings_req\0227\n"
  "\002id\030\001 \001(\0162\016.main.proto_id:\033change_join_s"
  "ettings_req_id\022%\n\010settings\030\003 \001(\0132\023.main."
  "join_settings\"t\n\031change_join_settings_re"
  "sp\0228\n\002id\030\001 \001(\0162\016.main.proto_id:\034change_j"
  "oin_settings_resp_id\022\035\n\005error\030\002 \001(\0162\016.ma"
  "in.error_id\"\\\n\rsend_info_req\022,\n\002id\030\001 \001(\016"
  "2\016.main.proto_id:\020send_info_req_id\022\017\n\007ro"
  "om_id\030\002 \001(\005\022\014\n\004info\030\003 \001(\t\"^\n\016send_info_r"
  "esp\022-\n\002id\030\001 \001(\0162\016.main.proto_id:\021send_in"
  "fo_resp_id\022\035\n\005error\030\002 \001(\0162\016.main.error_i"
  "d\"p\n\rrecv_info_ntf\022,\n\002id\030\001 \001(\0162\016.main.pr"
  "oto_id:\020recv_info_ntf_id\022\017\n\007room_id\030\002 \001("
  "\005\022\023\n\013sender_name\030\003 \001(\t\022\013\n\003msg\030\004 \001(\t\"N\n\re"
  "xit_room_req\022,\n\002id\030\001 \001(\0162\016.main.proto_id"
  ":\020exit_room_req_id\022\017\n\007room_id\030\002 \001(\005\"^\n\016e"
  "xit_room_resp\022-\n\002id\030\001 \001(\0162\016.main.proto_i"
  "d:\021exit_room_resp_id\022\035\n\005error\030\002 \001(\0162\016.ma"
  "in.error_id*\351\004\n\010proto_id\022\020\n\014login_req_id"
  "\020\001\022\021\n\rlogin_resp_id\020\002\022\035\n\030get_all_room_li"
  "st_req_id\020\351\007\022\036\n\031get_all_room_list_resp_i"
  "d\020\352\007\022\027\n\022create_room_req_id\020\353\007\022\030\n\023create_"
  "room_resp_id\020\354\007\022\030\n\023dismiss_room_req_id\020\355"
  "\007\022\031\n\024dismiss_room_resp_id\020\356\007\022 \n\033change_r"
  "oom_settings_req_id\020\357\007\022!\n\034change_room_se"
  "ttings_resp_id\020\360\007\022 \n\033change_room_setting"
  "s_ntf_id\020\361\007\022\025\n\020join_room_req_id\020\321\017\022\026\n\021jo"
  "in_room_resp_id\020\322\017\022 \n\033change_join_settin"
  "gs_req_id\020\323\017\022!\n\034change_join_settings_res"
  "p_id\020\324\017\022\025\n\020send_info_req_id\020\325\017\022\026\n\021send_i"
  "nfo_resp_id\020\326\017\022\025\n\020recv_info_ntf_id\020\327\017\022\025\n"
  "\020exit_room_req_id\020\330\017\022\026\n\021exit_room_resp_i"
  "d\020\331\017\022\037\n\032get_room_all_member_req_id\020\332\017\022 \n"
  "\033get_room_all_member_resp_id\020\333\017*\334\001\n\010erro"
  "r_id\022\014\n\010err_none\020\000\022\017\n\013err_unknown\020\001\022\025\n\021e"
  "rr_parsing_proto\020\002\022\032\n\025err_room_name_inva"
  "lid\020\351\007\022\032\n\025err_room_id_not_exist\020\352\007\022\'\n\"er"
  "r_opt_disallowed_not_room_holder\020\353\007\022\037\n\032e"
  "rr_join_room_name_invalid\020\321\017\022\030\n\023err_join"
  "_room_close\020\322\017"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cs_2eproto_sccs[24] = {
  &scc_info_change_join_settings_req_cs_2eproto.base,
  &scc_info_change_join_settings_resp_cs_2eproto.base,
  &scc_info_change_room_settings_ntf_cs_2eproto.base,
  &scc_info_change_room_settings_req_cs_2eproto.base,
  &scc_info_change_room_settings_resp_cs_2eproto.base,
  &scc_info_create_room_req_cs_2eproto.base,
  &scc_info_create_room_resp_cs_2eproto.base,
  &scc_info_dismiss_room_req_cs_2eproto.base,
  &scc_info_dismiss_room_resp_cs_2eproto.base,
  &scc_info_exit_room_req_cs_2eproto.base,
  &scc_info_exit_room_resp_cs_2eproto.base,
  &scc_info_get_all_room_list_req_cs_2eproto.base,
  &scc_info_get_all_room_list_resp_cs_2eproto.base,
  &scc_info_get_room_all_member_req_cs_2eproto.base,
  &scc_info_get_room_all_member_resp_cs_2eproto.base,
  &scc_info_join_room_req_cs_2eproto.base,
  &scc_info_join_room_resp_cs_2eproto.base,
  &scc_info_join_settings_cs_2eproto.base,
  &scc_info_login_req_cs_2eproto.base,
  &scc_info_login_resp_cs_2eproto.base,
  &scc_info_recv_info_ntf_cs_2eproto.base,
  &scc_info_room_settings_cs_2eproto.base,
  &scc_info_send_info_req_cs_2eproto.base,
  &scc_info_send_info_resp_cs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_2eproto = {
  false, false, descriptor_table_protodef_cs_2eproto, "cs.proto", 3294,
  &descriptor_table_cs_2eproto_once, descriptor_table_cs_2eproto_sccs, descriptor_table_cs_2eproto_deps, 24, 0,
  schemas, file_default_instances, TableStruct_cs_2eproto::offsets,
  file_level_metadata_cs_2eproto, 24, file_level_enum_descriptors_cs_2eproto, file_level_service_descriptors_cs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cs_2eproto)), true);
namespace main {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* proto_id_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cs_2eproto);
  return file_level_enum_descriptors_cs_2eproto[0];
}
bool proto_id_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* error_id_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cs_2eproto);
  return file_level_enum_descriptors_cs_2eproto[1];
}
bool error_id_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 1001:
    case 1002:
    case 1003:
    case 2001:
    case 2002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class login_req::_Internal {
 public:
  using HasBits = decltype(std::declval<login_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

login_req::login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.login_req)
}
login_req::login_req(const login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auth()) {
    auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:main.login_req)
}

void login_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_login_req_cs_2eproto.base);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 1;
}

login_req::~login_req() {
  // @@protoc_insertion_point(destructor:main.login_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_req::ArenaDtor(void* object) {
  login_req* _this = reinterpret_cast< login_req* >(object);
  (void)_this;
}
void login_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_req& login_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_login_req_cs_2eproto.base);
  return *internal_default_instance();
}


void login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      auth_.ClearNonDefaultToEmpty();
    }
    id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = login_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.login_req.auth");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = login_req_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string auth = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auth().data(), static_cast<int>(this->_internal_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.login_req.auth");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.login_req)
  return target;
}

size_t login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.login_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string auth = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auth());
    }

    // optional .main.proto_id id = 1 [default = login_req_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.login_req)
  GOOGLE_DCHECK_NE(&from, this);
  const login_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.login_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.login_req)
    MergeFrom(*source);
  }
}

void login_req::MergeFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.login_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_auth(from._internal_auth());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void login_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_req::CopyFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_req::IsInitialized() const {
  return true;
}

void login_req::InternalSwap(login_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_.Swap(&other->auth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class login_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<login_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

login_resp::login_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.login_resp)
}
login_resp::login_resp(const login_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auth()) {
    auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth(), 
      GetArena());
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.login_resp)
}

void login_resp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_login_resp_cs_2eproto.base);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = 0;
  id_ = 2;
}

login_resp::~login_resp() {
  // @@protoc_insertion_point(destructor:main.login_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void login_resp::ArenaDtor(void* object) {
  login_resp* _this = reinterpret_cast< login_resp* >(object);
  (void)_this;
}
void login_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_resp& login_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_login_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void login_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.login_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auth_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    error_ = 0;
    id_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = login_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string auth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.login_resp.auth");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.login_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = login_resp_id];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // optional string auth = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auth().data(), static_cast<int>(this->_internal_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.login_resp.auth");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.login_resp)
  return target;
}

size_t login_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.login_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string auth = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auth());
    }

    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = login_resp_id];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.login_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const login_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.login_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.login_resp)
    MergeFrom(*source);
  }
}

void login_resp::MergeFrom(const login_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.login_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_auth(from._internal_auth());
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void login_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.login_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_resp::CopyFrom(const login_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.login_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_resp::IsInitialized() const {
  return true;
}

void login_resp::InternalSwap(login_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_.Swap(&other->auth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_all_room_list_req::_Internal {
 public:
  using HasBits = decltype(std::declval<get_all_room_list_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_all_room_list_req::get_all_room_list_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.get_all_room_list_req)
}
get_all_room_list_req::get_all_room_list_req(const get_all_room_list_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:main.get_all_room_list_req)
}

void get_all_room_list_req::SharedCtor() {
  id_ = 1001;
}

get_all_room_list_req::~get_all_room_list_req() {
  // @@protoc_insertion_point(destructor:main.get_all_room_list_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_all_room_list_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_all_room_list_req::ArenaDtor(void* object) {
  get_all_room_list_req* _this = reinterpret_cast< get_all_room_list_req* >(object);
  (void)_this;
}
void get_all_room_list_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_all_room_list_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_all_room_list_req& get_all_room_list_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_all_room_list_req_cs_2eproto.base);
  return *internal_default_instance();
}


void get_all_room_list_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.get_all_room_list_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 1001;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_all_room_list_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = get_all_room_list_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_all_room_list_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.get_all_room_list_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = get_all_room_list_req_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.get_all_room_list_req)
  return target;
}

size_t get_all_room_list_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.get_all_room_list_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .main.proto_id id = 1 [default = get_all_room_list_req_id];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_all_room_list_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.get_all_room_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  const get_all_room_list_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_all_room_list_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.get_all_room_list_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.get_all_room_list_req)
    MergeFrom(*source);
  }
}

void get_all_room_list_req::MergeFrom(const get_all_room_list_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.get_all_room_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void get_all_room_list_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.get_all_room_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_room_list_req::CopyFrom(const get_all_room_list_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.get_all_room_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_room_list_req::IsInitialized() const {
  return true;
}

void get_all_room_list_req::InternalSwap(get_all_room_list_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_all_room_list_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_all_room_list_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<get_all_room_list_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_all_room_list_resp::get_all_room_list_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rooms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.get_all_room_list_resp)
}
get_all_room_list_resp::get_all_room_list_resp(const get_all_room_list_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:main.get_all_room_list_resp)
}

void get_all_room_list_resp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_all_room_list_resp_cs_2eproto.base);
  id_ = 1002;
}

get_all_room_list_resp::~get_all_room_list_resp() {
  // @@protoc_insertion_point(destructor:main.get_all_room_list_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_all_room_list_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_all_room_list_resp::ArenaDtor(void* object) {
  get_all_room_list_resp* _this = reinterpret_cast< get_all_room_list_resp* >(object);
  (void)_this;
}
void get_all_room_list_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_all_room_list_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_all_room_list_resp& get_all_room_list_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_all_room_list_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void get_all_room_list_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.get_all_room_list_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  id_ = 1002;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_all_room_list_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = get_all_room_list_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .main.room_settings rooms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_all_room_list_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.get_all_room_list_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = get_all_room_list_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated .main.room_settings rooms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rooms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.get_all_room_list_resp)
  return target;
}

size_t get_all_room_list_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.get_all_room_list_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .main.room_settings rooms = 2;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .main.proto_id id = 1 [default = get_all_room_list_resp_id];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_all_room_list_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.get_all_room_list_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const get_all_room_list_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_all_room_list_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.get_all_room_list_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.get_all_room_list_resp)
    MergeFrom(*source);
  }
}

void get_all_room_list_resp::MergeFrom(const get_all_room_list_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.get_all_room_list_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void get_all_room_list_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.get_all_room_list_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_room_list_resp::CopyFrom(const get_all_room_list_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.get_all_room_list_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_room_list_resp::IsInitialized() const {
  return true;
}

void get_all_room_list_resp::InternalSwap(get_all_room_list_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rooms_.InternalSwap(&other->rooms_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_all_room_list_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class create_room_req::_Internal {
 public:
  using HasBits = decltype(std::declval<create_room_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::main::room_settings& settings(const create_room_req* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::main::room_settings&
create_room_req::_Internal::settings(const create_room_req* msg) {
  return *msg->settings_;
}
create_room_req::create_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.create_room_req)
}
create_room_req::create_room_req(const create_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::main::room_settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:main.create_room_req)
}

void create_room_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_create_room_req_cs_2eproto.base);
  settings_ = nullptr;
  id_ = 1003;
}

create_room_req::~create_room_req() {
  // @@protoc_insertion_point(destructor:main.create_room_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_room_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void create_room_req::ArenaDtor(void* object) {
  create_room_req* _this = reinterpret_cast< create_room_req* >(object);
  (void)_this;
}
void create_room_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_room_req& create_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_room_req_cs_2eproto.base);
  return *internal_default_instance();
}


void create_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.create_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    id_ = 1003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = create_room_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.room_settings settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_room_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.create_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = create_room_req_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.room_settings settings = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.create_room_req)
  return target;
}

size_t create_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.create_room_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.room_settings settings = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .main.proto_id id = 1 [default = create_room_req_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.create_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const create_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.create_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.create_room_req)
    MergeFrom(*source);
  }
}

void create_room_req::MergeFrom(const create_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.create_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::main::room_settings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void create_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.create_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_room_req::CopyFrom(const create_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.create_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_room_req::IsInitialized() const {
  return true;
}

void create_room_req::InternalSwap(create_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(settings_, other->settings_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class room_settings::_Internal {
 public:
  using HasBits = decltype(std::declval<room_settings>()._has_bits_);
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_room_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

room_settings::room_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.room_settings)
}
room_settings::room_settings(const room_settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_room_name()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(open_));
  // @@protoc_insertion_point(copy_constructor:main.room_settings)
}

void room_settings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_room_settings_cs_2eproto.base);
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
  open_ = true;
}

room_settings::~room_settings() {
  // @@protoc_insertion_point(destructor:main.room_settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void room_settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void room_settings::ArenaDtor(void* object) {
  room_settings* _this = reinterpret_cast< room_settings* >(object);
  (void)_this;
}
void room_settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void room_settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const room_settings& room_settings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_room_settings_cs_2eproto.base);
  return *internal_default_instance();
}


void room_settings::Clear() {
// @@protoc_insertion_point(message_clear_start:main.room_settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    room_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    room_id_ = 0;
    open_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* room_settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string room_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.room_settings.room_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool open = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_open(&has_bits);
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* room_settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.room_settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 room_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  // optional string room_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.room_settings.room_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_name(), target);
  }

  // optional bool open = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.room_settings)
  return target;
}

size_t room_settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.room_settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string room_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_room_name());
    }

    // optional int32 room_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional bool open = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void room_settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.room_settings)
  GOOGLE_DCHECK_NE(&from, this);
  const room_settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<room_settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.room_settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.room_settings)
    MergeFrom(*source);
  }
}

void room_settings::MergeFrom(const room_settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.room_settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_room_name(from._internal_room_name());
    }
    if (cached_has_bits & 0x00000002u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      open_ = from.open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void room_settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.room_settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_settings::CopyFrom(const room_settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.room_settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_settings::IsInitialized() const {
  return true;
}

void room_settings::InternalSwap(room_settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(room_id_, other->room_id_);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata room_settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class create_room_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<create_room_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

create_room_resp::create_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.create_room_resp)
}
create_room_resp::create_room_resp(const create_room_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_room_id_, &from.new_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&new_room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.create_room_resp)
}

void create_room_resp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&new_room_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&new_room_id_)) + sizeof(error_));
  id_ = 1004;
}

create_room_resp::~create_room_resp() {
  // @@protoc_insertion_point(destructor:main.create_room_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_room_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void create_room_resp::ArenaDtor(void* object) {
  create_room_resp* _this = reinterpret_cast< create_room_resp* >(object);
  (void)_this;
}
void create_room_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_room_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_room_resp& create_room_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_room_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void create_room_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.create_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&new_room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&new_room_id_)) + sizeof(error_));
    id_ = 1004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_room_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = create_room_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 new_room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_room_id(&has_bits);
          new_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_room_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.create_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = create_room_resp_id];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 new_room_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_room_id(), target);
  }

  // optional .main.error_id error = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.create_room_resp)
  return target;
}

size_t create_room_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.create_room_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 new_room_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_room_id());
    }

    // optional .main.error_id error = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = create_room_resp_id];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_room_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.create_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const create_room_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_room_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.create_room_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.create_room_resp)
    MergeFrom(*source);
  }
}

void create_room_resp::MergeFrom(const create_room_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.create_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      new_room_id_ = from.new_room_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void create_room_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.create_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_room_resp::CopyFrom(const create_room_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.create_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_room_resp::IsInitialized() const {
  return true;
}

void create_room_resp::InternalSwap(create_room_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(create_room_resp, error_)
      + sizeof(create_room_resp::error_)
      - PROTOBUF_FIELD_OFFSET(create_room_resp, new_room_id_)>(
          reinterpret_cast<char*>(&new_room_id_),
          reinterpret_cast<char*>(&other->new_room_id_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_room_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class dismiss_room_req::_Internal {
 public:
  using HasBits = decltype(std::declval<dismiss_room_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

dismiss_room_req::dismiss_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.dismiss_room_req)
}
dismiss_room_req::dismiss_room_req(const dismiss_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.dismiss_room_req)
}

void dismiss_room_req::SharedCtor() {
  room_id_ = 0;
  id_ = 1005;
}

dismiss_room_req::~dismiss_room_req() {
  // @@protoc_insertion_point(destructor:main.dismiss_room_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dismiss_room_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dismiss_room_req::ArenaDtor(void* object) {
  dismiss_room_req* _this = reinterpret_cast< dismiss_room_req* >(object);
  (void)_this;
}
void dismiss_room_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dismiss_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dismiss_room_req& dismiss_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dismiss_room_req_cs_2eproto.base);
  return *internal_default_instance();
}


void dismiss_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.dismiss_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    room_id_ = 0;
    id_ = 1005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dismiss_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = dismiss_room_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dismiss_room_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.dismiss_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = dismiss_room_req_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.dismiss_room_req)
  return target;
}

size_t dismiss_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.dismiss_room_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = dismiss_room_req_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dismiss_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.dismiss_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const dismiss_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dismiss_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.dismiss_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.dismiss_room_req)
    MergeFrom(*source);
  }
}

void dismiss_room_req::MergeFrom(const dismiss_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.dismiss_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dismiss_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.dismiss_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dismiss_room_req::CopyFrom(const dismiss_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.dismiss_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dismiss_room_req::IsInitialized() const {
  return true;
}

void dismiss_room_req::InternalSwap(dismiss_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(room_id_, other->room_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dismiss_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class dismiss_room_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<dismiss_room_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

dismiss_room_resp::dismiss_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.dismiss_room_resp)
}
dismiss_room_resp::dismiss_room_resp(const dismiss_room_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.dismiss_room_resp)
}

void dismiss_room_resp::SharedCtor() {
  error_ = 0;
  id_ = 1006;
}

dismiss_room_resp::~dismiss_room_resp() {
  // @@protoc_insertion_point(destructor:main.dismiss_room_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dismiss_room_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dismiss_room_resp::ArenaDtor(void* object) {
  dismiss_room_resp* _this = reinterpret_cast< dismiss_room_resp* >(object);
  (void)_this;
}
void dismiss_room_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dismiss_room_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dismiss_room_resp& dismiss_room_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dismiss_room_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void dismiss_room_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.dismiss_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    id_ = 1006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dismiss_room_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = dismiss_room_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dismiss_room_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.dismiss_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = dismiss_room_resp_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.dismiss_room_resp)
  return target;
}

size_t dismiss_room_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.dismiss_room_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = dismiss_room_resp_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dismiss_room_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.dismiss_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const dismiss_room_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dismiss_room_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.dismiss_room_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.dismiss_room_resp)
    MergeFrom(*source);
  }
}

void dismiss_room_resp::MergeFrom(const dismiss_room_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.dismiss_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dismiss_room_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.dismiss_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dismiss_room_resp::CopyFrom(const dismiss_room_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.dismiss_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dismiss_room_resp::IsInitialized() const {
  return true;
}

void dismiss_room_resp::InternalSwap(dismiss_room_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dismiss_room_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class change_room_settings_req::_Internal {
 public:
  using HasBits = decltype(std::declval<change_room_settings_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::main::room_settings& settings(const change_room_settings_req* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::main::room_settings&
change_room_settings_req::_Internal::settings(const change_room_settings_req* msg) {
  return *msg->settings_;
}
change_room_settings_req::change_room_settings_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.change_room_settings_req)
}
change_room_settings_req::change_room_settings_req(const change_room_settings_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::main::room_settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.change_room_settings_req)
}

void change_room_settings_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_change_room_settings_req_cs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(room_id_));
  id_ = 1007;
}

change_room_settings_req::~change_room_settings_req() {
  // @@protoc_insertion_point(destructor:main.change_room_settings_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void change_room_settings_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void change_room_settings_req::ArenaDtor(void* object) {
  change_room_settings_req* _this = reinterpret_cast< change_room_settings_req* >(object);
  (void)_this;
}
void change_room_settings_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void change_room_settings_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const change_room_settings_req& change_room_settings_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_change_room_settings_req_cs_2eproto.base);
  return *internal_default_instance();
}


void change_room_settings_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.change_room_settings_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(settings_ != nullptr);
    settings_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    room_id_ = 0;
    id_ = 1007;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* change_room_settings_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = change_room_settings_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .main.room_settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* change_room_settings_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.change_room_settings_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = change_room_settings_req_id];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  // optional .main.room_settings settings = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.change_room_settings_req)
  return target;
}

size_t change_room_settings_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.change_room_settings_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .main.room_settings settings = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = change_room_settings_req_id];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void change_room_settings_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.change_room_settings_req)
  GOOGLE_DCHECK_NE(&from, this);
  const change_room_settings_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<change_room_settings_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.change_room_settings_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.change_room_settings_req)
    MergeFrom(*source);
  }
}

void change_room_settings_req::MergeFrom(const change_room_settings_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.change_room_settings_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::main::room_settings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void change_room_settings_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.change_room_settings_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_room_settings_req::CopyFrom(const change_room_settings_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.change_room_settings_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_room_settings_req::IsInitialized() const {
  return true;
}

void change_room_settings_req::InternalSwap(change_room_settings_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(change_room_settings_req, room_id_)
      + sizeof(change_room_settings_req::room_id_)
      - PROTOBUF_FIELD_OFFSET(change_room_settings_req, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata change_room_settings_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class change_room_settings_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<change_room_settings_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

change_room_settings_resp::change_room_settings_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.change_room_settings_resp)
}
change_room_settings_resp::change_room_settings_resp(const change_room_settings_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.change_room_settings_resp)
}

void change_room_settings_resp::SharedCtor() {
  error_ = 0;
  id_ = 1008;
}

change_room_settings_resp::~change_room_settings_resp() {
  // @@protoc_insertion_point(destructor:main.change_room_settings_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void change_room_settings_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void change_room_settings_resp::ArenaDtor(void* object) {
  change_room_settings_resp* _this = reinterpret_cast< change_room_settings_resp* >(object);
  (void)_this;
}
void change_room_settings_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void change_room_settings_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const change_room_settings_resp& change_room_settings_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_change_room_settings_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void change_room_settings_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.change_room_settings_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    id_ = 1008;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* change_room_settings_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = change_room_settings_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* change_room_settings_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.change_room_settings_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = change_room_settings_resp_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.change_room_settings_resp)
  return target;
}

size_t change_room_settings_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.change_room_settings_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = change_room_settings_resp_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void change_room_settings_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.change_room_settings_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const change_room_settings_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<change_room_settings_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.change_room_settings_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.change_room_settings_resp)
    MergeFrom(*source);
  }
}

void change_room_settings_resp::MergeFrom(const change_room_settings_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.change_room_settings_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void change_room_settings_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.change_room_settings_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_room_settings_resp::CopyFrom(const change_room_settings_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.change_room_settings_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_room_settings_resp::IsInitialized() const {
  return true;
}

void change_room_settings_resp::InternalSwap(change_room_settings_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata change_room_settings_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class change_room_settings_ntf::_Internal {
 public:
  using HasBits = decltype(std::declval<change_room_settings_ntf>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::main::room_settings& settings(const change_room_settings_ntf* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::main::room_settings&
change_room_settings_ntf::_Internal::settings(const change_room_settings_ntf* msg) {
  return *msg->settings_;
}
change_room_settings_ntf::change_room_settings_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.change_room_settings_ntf)
}
change_room_settings_ntf::change_room_settings_ntf(const change_room_settings_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::main::room_settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.change_room_settings_ntf)
}

void change_room_settings_ntf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_change_room_settings_ntf_cs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(room_id_));
  id_ = 1009;
}

change_room_settings_ntf::~change_room_settings_ntf() {
  // @@protoc_insertion_point(destructor:main.change_room_settings_ntf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void change_room_settings_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void change_room_settings_ntf::ArenaDtor(void* object) {
  change_room_settings_ntf* _this = reinterpret_cast< change_room_settings_ntf* >(object);
  (void)_this;
}
void change_room_settings_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void change_room_settings_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const change_room_settings_ntf& change_room_settings_ntf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_change_room_settings_ntf_cs_2eproto.base);
  return *internal_default_instance();
}


void change_room_settings_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:main.change_room_settings_ntf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(settings_ != nullptr);
    settings_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    room_id_ = 0;
    id_ = 1009;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* change_room_settings_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = change_room_settings_ntf_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .main.room_settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* change_room_settings_ntf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.change_room_settings_ntf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = change_room_settings_ntf_id];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  // optional .main.room_settings settings = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.change_room_settings_ntf)
  return target;
}

size_t change_room_settings_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.change_room_settings_ntf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .main.room_settings settings = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = change_room_settings_ntf_id];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void change_room_settings_ntf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.change_room_settings_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  const change_room_settings_ntf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<change_room_settings_ntf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.change_room_settings_ntf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.change_room_settings_ntf)
    MergeFrom(*source);
  }
}

void change_room_settings_ntf::MergeFrom(const change_room_settings_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.change_room_settings_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::main::room_settings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void change_room_settings_ntf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.change_room_settings_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_room_settings_ntf::CopyFrom(const change_room_settings_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.change_room_settings_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_room_settings_ntf::IsInitialized() const {
  return true;
}

void change_room_settings_ntf::InternalSwap(change_room_settings_ntf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(change_room_settings_ntf, room_id_)
      + sizeof(change_room_settings_ntf::room_id_)
      - PROTOBUF_FIELD_OFFSET(change_room_settings_ntf, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata change_room_settings_ntf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class join_room_req::_Internal {
 public:
  using HasBits = decltype(std::declval<join_room_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::main::join_settings& settings(const join_room_req* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::main::join_settings&
join_room_req::_Internal::settings(const join_room_req* msg) {
  return *msg->settings_;
}
join_room_req::join_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.join_room_req)
}
join_room_req::join_room_req(const join_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::main::join_settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.join_room_req)
}

void join_room_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_join_room_req_cs_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(room_id_));
  id_ = 2001;
}

join_room_req::~join_room_req() {
  // @@protoc_insertion_point(destructor:main.join_room_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void join_room_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void join_room_req::ArenaDtor(void* object) {
  join_room_req* _this = reinterpret_cast< join_room_req* >(object);
  (void)_this;
}
void join_room_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void join_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const join_room_req& join_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_join_room_req_cs_2eproto.base);
  return *internal_default_instance();
}


void join_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.join_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(settings_ != nullptr);
    settings_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    room_id_ = 0;
    id_ = 2001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* join_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = join_room_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .main.join_settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* join_room_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.join_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = join_room_req_id];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  // optional .main.join_settings settings = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.join_room_req)
  return target;
}

size_t join_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.join_room_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .main.join_settings settings = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = join_room_req_id];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void join_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.join_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const join_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<join_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.join_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.join_room_req)
    MergeFrom(*source);
  }
}

void join_room_req::MergeFrom(const join_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.join_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::main::join_settings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void join_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.join_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_room_req::CopyFrom(const join_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.join_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_room_req::IsInitialized() const {
  return true;
}

void join_room_req::InternalSwap(join_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(join_room_req, room_id_)
      + sizeof(join_room_req::room_id_)
      - PROTOBUF_FIELD_OFFSET(join_room_req, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata join_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class join_settings::_Internal {
 public:
  using HasBits = decltype(std::declval<join_settings>()._has_bits_);
  static void set_has_join_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

join_settings::join_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.join_settings)
}
join_settings::join_settings(const join_settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  join_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_join_name()) {
    join_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_join_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:main.join_settings)
}

void join_settings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_join_settings_cs_2eproto.base);
  join_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

join_settings::~join_settings() {
  // @@protoc_insertion_point(destructor:main.join_settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void join_settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  join_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void join_settings::ArenaDtor(void* object) {
  join_settings* _this = reinterpret_cast< join_settings* >(object);
  (void)_this;
}
void join_settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void join_settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const join_settings& join_settings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_join_settings_cs_2eproto.base);
  return *internal_default_instance();
}


void join_settings::Clear() {
// @@protoc_insertion_point(message_clear_start:main.join_settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    join_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* join_settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string join_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_join_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.join_settings.join_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* join_settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.join_settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string join_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_join_name().data(), static_cast<int>(this->_internal_join_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.join_settings.join_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_join_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.join_settings)
  return target;
}

size_t join_settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.join_settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string join_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_join_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void join_settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.join_settings)
  GOOGLE_DCHECK_NE(&from, this);
  const join_settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<join_settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.join_settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.join_settings)
    MergeFrom(*source);
  }
}

void join_settings::MergeFrom(const join_settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.join_settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_join_name()) {
    _internal_set_join_name(from._internal_join_name());
  }
}

void join_settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.join_settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_settings::CopyFrom(const join_settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.join_settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_settings::IsInitialized() const {
  return true;
}

void join_settings::InternalSwap(join_settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  join_name_.Swap(&other->join_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata join_settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_room_all_member_req::_Internal {
 public:
  using HasBits = decltype(std::declval<get_room_all_member_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_room_all_member_req::get_room_all_member_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.get_room_all_member_req)
}
get_room_all_member_req::get_room_all_member_req(const get_room_all_member_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.get_room_all_member_req)
}

void get_room_all_member_req::SharedCtor() {
  room_id_ = 0;
  id_ = 2010;
}

get_room_all_member_req::~get_room_all_member_req() {
  // @@protoc_insertion_point(destructor:main.get_room_all_member_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_room_all_member_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_room_all_member_req::ArenaDtor(void* object) {
  get_room_all_member_req* _this = reinterpret_cast< get_room_all_member_req* >(object);
  (void)_this;
}
void get_room_all_member_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_room_all_member_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_room_all_member_req& get_room_all_member_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_room_all_member_req_cs_2eproto.base);
  return *internal_default_instance();
}


void get_room_all_member_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.get_room_all_member_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    room_id_ = 0;
    id_ = 2010;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_room_all_member_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = get_room_all_member_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_room_all_member_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.get_room_all_member_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = get_room_all_member_req_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.get_room_all_member_req)
  return target;
}

size_t get_room_all_member_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.get_room_all_member_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = get_room_all_member_req_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_room_all_member_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.get_room_all_member_req)
  GOOGLE_DCHECK_NE(&from, this);
  const get_room_all_member_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_room_all_member_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.get_room_all_member_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.get_room_all_member_req)
    MergeFrom(*source);
  }
}

void get_room_all_member_req::MergeFrom(const get_room_all_member_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.get_room_all_member_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void get_room_all_member_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.get_room_all_member_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_room_all_member_req::CopyFrom(const get_room_all_member_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.get_room_all_member_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_room_all_member_req::IsInitialized() const {
  return true;
}

void get_room_all_member_req::InternalSwap(get_room_all_member_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(room_id_, other->room_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_room_all_member_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_room_all_member_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<get_room_all_member_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_room_all_member_resp::get_room_all_member_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  join_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.get_room_all_member_resp)
}
get_room_all_member_resp::get_room_all_member_resp(const get_room_all_member_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      join_names_(from.join_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:main.get_room_all_member_resp)
}

void get_room_all_member_resp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_room_all_member_resp_cs_2eproto.base);
  id_ = 2011;
}

get_room_all_member_resp::~get_room_all_member_resp() {
  // @@protoc_insertion_point(destructor:main.get_room_all_member_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_room_all_member_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_room_all_member_resp::ArenaDtor(void* object) {
  get_room_all_member_resp* _this = reinterpret_cast< get_room_all_member_resp* >(object);
  (void)_this;
}
void get_room_all_member_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_room_all_member_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_room_all_member_resp& get_room_all_member_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_room_all_member_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void get_room_all_member_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.get_room_all_member_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  join_names_.Clear();
  id_ = 2011;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_room_all_member_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = get_room_all_member_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string join_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_join_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.get_room_all_member_resp.join_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_room_all_member_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.get_room_all_member_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = get_room_all_member_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated string join_names = 2;
  for (int i = 0, n = this->_internal_join_names_size(); i < n; i++) {
    const auto& s = this->_internal_join_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.get_room_all_member_resp.join_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.get_room_all_member_resp)
  return target;
}

size_t get_room_all_member_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.get_room_all_member_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string join_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(join_names_.size());
  for (int i = 0, n = join_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      join_names_.Get(i));
  }

  // optional .main.proto_id id = 1 [default = get_room_all_member_resp_id];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_room_all_member_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.get_room_all_member_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const get_room_all_member_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_room_all_member_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.get_room_all_member_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.get_room_all_member_resp)
    MergeFrom(*source);
  }
}

void get_room_all_member_resp::MergeFrom(const get_room_all_member_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.get_room_all_member_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  join_names_.MergeFrom(from.join_names_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void get_room_all_member_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.get_room_all_member_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_room_all_member_resp::CopyFrom(const get_room_all_member_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.get_room_all_member_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_room_all_member_resp::IsInitialized() const {
  return true;
}

void get_room_all_member_resp::InternalSwap(get_room_all_member_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  join_names_.InternalSwap(&other->join_names_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_room_all_member_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class join_room_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<join_room_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

join_room_resp::join_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.join_room_resp)
}
join_room_resp::join_room_resp(const join_room_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.join_room_resp)
}

void join_room_resp::SharedCtor() {
  error_ = 0;
  id_ = 2002;
}

join_room_resp::~join_room_resp() {
  // @@protoc_insertion_point(destructor:main.join_room_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void join_room_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void join_room_resp::ArenaDtor(void* object) {
  join_room_resp* _this = reinterpret_cast< join_room_resp* >(object);
  (void)_this;
}
void join_room_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void join_room_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const join_room_resp& join_room_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_join_room_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void join_room_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.join_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    id_ = 2002;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* join_room_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = join_room_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* join_room_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.join_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = join_room_resp_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.join_room_resp)
  return target;
}

size_t join_room_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.join_room_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = join_room_resp_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void join_room_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.join_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const join_room_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<join_room_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.join_room_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.join_room_resp)
    MergeFrom(*source);
  }
}

void join_room_resp::MergeFrom(const join_room_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.join_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void join_room_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.join_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_room_resp::CopyFrom(const join_room_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.join_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_room_resp::IsInitialized() const {
  return true;
}

void join_room_resp::InternalSwap(join_room_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata join_room_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class change_join_settings_req::_Internal {
 public:
  using HasBits = decltype(std::declval<change_join_settings_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::main::join_settings& settings(const change_join_settings_req* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::main::join_settings&
change_join_settings_req::_Internal::settings(const change_join_settings_req* msg) {
  return *msg->settings_;
}
change_join_settings_req::change_join_settings_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.change_join_settings_req)
}
change_join_settings_req::change_join_settings_req(const change_join_settings_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::main::join_settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:main.change_join_settings_req)
}

void change_join_settings_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_change_join_settings_req_cs_2eproto.base);
  settings_ = nullptr;
  id_ = 2003;
}

change_join_settings_req::~change_join_settings_req() {
  // @@protoc_insertion_point(destructor:main.change_join_settings_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void change_join_settings_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void change_join_settings_req::ArenaDtor(void* object) {
  change_join_settings_req* _this = reinterpret_cast< change_join_settings_req* >(object);
  (void)_this;
}
void change_join_settings_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void change_join_settings_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const change_join_settings_req& change_join_settings_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_change_join_settings_req_cs_2eproto.base);
  return *internal_default_instance();
}


void change_join_settings_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.change_join_settings_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    id_ = 2003;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* change_join_settings_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = change_join_settings_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.join_settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* change_join_settings_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.change_join_settings_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = change_join_settings_req_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.join_settings settings = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.change_join_settings_req)
  return target;
}

size_t change_join_settings_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.change_join_settings_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.join_settings settings = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .main.proto_id id = 1 [default = change_join_settings_req_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void change_join_settings_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.change_join_settings_req)
  GOOGLE_DCHECK_NE(&from, this);
  const change_join_settings_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<change_join_settings_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.change_join_settings_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.change_join_settings_req)
    MergeFrom(*source);
  }
}

void change_join_settings_req::MergeFrom(const change_join_settings_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.change_join_settings_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::main::join_settings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void change_join_settings_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.change_join_settings_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_join_settings_req::CopyFrom(const change_join_settings_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.change_join_settings_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_join_settings_req::IsInitialized() const {
  return true;
}

void change_join_settings_req::InternalSwap(change_join_settings_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(settings_, other->settings_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata change_join_settings_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class change_join_settings_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<change_join_settings_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

change_join_settings_resp::change_join_settings_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.change_join_settings_resp)
}
change_join_settings_resp::change_join_settings_resp(const change_join_settings_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.change_join_settings_resp)
}

void change_join_settings_resp::SharedCtor() {
  error_ = 0;
  id_ = 2004;
}

change_join_settings_resp::~change_join_settings_resp() {
  // @@protoc_insertion_point(destructor:main.change_join_settings_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void change_join_settings_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void change_join_settings_resp::ArenaDtor(void* object) {
  change_join_settings_resp* _this = reinterpret_cast< change_join_settings_resp* >(object);
  (void)_this;
}
void change_join_settings_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void change_join_settings_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const change_join_settings_resp& change_join_settings_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_change_join_settings_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void change_join_settings_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.change_join_settings_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    id_ = 2004;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* change_join_settings_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = change_join_settings_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* change_join_settings_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.change_join_settings_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = change_join_settings_resp_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.change_join_settings_resp)
  return target;
}

size_t change_join_settings_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.change_join_settings_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = change_join_settings_resp_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void change_join_settings_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.change_join_settings_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const change_join_settings_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<change_join_settings_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.change_join_settings_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.change_join_settings_resp)
    MergeFrom(*source);
  }
}

void change_join_settings_resp::MergeFrom(const change_join_settings_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.change_join_settings_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void change_join_settings_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.change_join_settings_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_join_settings_resp::CopyFrom(const change_join_settings_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.change_join_settings_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_join_settings_resp::IsInitialized() const {
  return true;
}

void change_join_settings_resp::InternalSwap(change_join_settings_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata change_join_settings_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class send_info_req::_Internal {
 public:
  using HasBits = decltype(std::declval<send_info_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

send_info_req::send_info_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.send_info_req)
}
send_info_req::send_info_req(const send_info_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_info()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.send_info_req)
}

void send_info_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_send_info_req_cs_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
  id_ = 2005;
}

send_info_req::~send_info_req() {
  // @@protoc_insertion_point(destructor:main.send_info_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void send_info_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void send_info_req::ArenaDtor(void* object) {
  send_info_req* _this = reinterpret_cast< send_info_req* >(object);
  (void)_this;
}
void send_info_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_info_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const send_info_req& send_info_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_send_info_req_cs_2eproto.base);
  return *internal_default_instance();
}


void send_info_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.send_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    room_id_ = 0;
    id_ = 2005;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_info_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = send_info_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.send_info_req.info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* send_info_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.send_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = send_info_req_id];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  // optional string info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.send_info_req.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.send_info_req)
  return target;
}

size_t send_info_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.send_info_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info());
    }

    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = send_info_req_id];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void send_info_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.send_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  const send_info_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<send_info_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.send_info_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.send_info_req)
    MergeFrom(*source);
  }
}

void send_info_req::MergeFrom(const send_info_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.send_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void send_info_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.send_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_info_req::CopyFrom(const send_info_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.send_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_info_req::IsInitialized() const {
  return true;
}

void send_info_req::InternalSwap(send_info_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(room_id_, other->room_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata send_info_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class send_info_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<send_info_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

send_info_resp::send_info_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.send_info_resp)
}
send_info_resp::send_info_resp(const send_info_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.send_info_resp)
}

void send_info_resp::SharedCtor() {
  error_ = 0;
  id_ = 2006;
}

send_info_resp::~send_info_resp() {
  // @@protoc_insertion_point(destructor:main.send_info_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void send_info_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void send_info_resp::ArenaDtor(void* object) {
  send_info_resp* _this = reinterpret_cast< send_info_resp* >(object);
  (void)_this;
}
void send_info_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_info_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const send_info_resp& send_info_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_send_info_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void send_info_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.send_info_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    id_ = 2006;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_info_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = send_info_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* send_info_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.send_info_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = send_info_resp_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.send_info_resp)
  return target;
}

size_t send_info_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.send_info_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = send_info_resp_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void send_info_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.send_info_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const send_info_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<send_info_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.send_info_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.send_info_resp)
    MergeFrom(*source);
  }
}

void send_info_resp::MergeFrom(const send_info_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.send_info_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void send_info_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.send_info_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_info_resp::CopyFrom(const send_info_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.send_info_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_info_resp::IsInitialized() const {
  return true;
}

void send_info_resp::InternalSwap(send_info_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata send_info_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recv_info_ntf::_Internal {
 public:
  using HasBits = decltype(std::declval<recv_info_ntf>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

recv_info_ntf::recv_info_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.recv_info_ntf)
}
recv_info_ntf::recv_info_ntf(const recv_info_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sender_name()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.recv_info_ntf)
}

void recv_info_ntf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_recv_info_ntf_cs_2eproto.base);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
  id_ = 2007;
}

recv_info_ntf::~recv_info_ntf() {
  // @@protoc_insertion_point(destructor:main.recv_info_ntf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recv_info_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recv_info_ntf::ArenaDtor(void* object) {
  recv_info_ntf* _this = reinterpret_cast< recv_info_ntf* >(object);
  (void)_this;
}
void recv_info_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recv_info_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const recv_info_ntf& recv_info_ntf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_recv_info_ntf_cs_2eproto.base);
  return *internal_default_instance();
}


void recv_info_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:main.recv_info_ntf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sender_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      msg_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    room_id_ = 0;
    id_ = 2007;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recv_info_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = recv_info_ntf_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.recv_info_ntf.sender_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "main.recv_info_ntf.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recv_info_ntf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.recv_info_ntf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = recv_info_ntf_id];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.recv_info_ntf.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  // optional string msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "main.recv_info_ntf.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.recv_info_ntf)
  return target;
}

size_t recv_info_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.recv_info_ntf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional string msg = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = recv_info_ntf_id];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recv_info_ntf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.recv_info_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  const recv_info_ntf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recv_info_ntf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.recv_info_ntf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.recv_info_ntf)
    MergeFrom(*source);
  }
}

void recv_info_ntf::MergeFrom(const recv_info_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.recv_info_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void recv_info_ntf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.recv_info_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recv_info_ntf::CopyFrom(const recv_info_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.recv_info_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recv_info_ntf::IsInitialized() const {
  return true;
}

void recv_info_ntf::InternalSwap(recv_info_ntf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(room_id_, other->room_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata recv_info_ntf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class exit_room_req::_Internal {
 public:
  using HasBits = decltype(std::declval<exit_room_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

exit_room_req::exit_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.exit_room_req)
}
exit_room_req::exit_room_req(const exit_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.exit_room_req)
}

void exit_room_req::SharedCtor() {
  room_id_ = 0;
  id_ = 2008;
}

exit_room_req::~exit_room_req() {
  // @@protoc_insertion_point(destructor:main.exit_room_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void exit_room_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void exit_room_req::ArenaDtor(void* object) {
  exit_room_req* _this = reinterpret_cast< exit_room_req* >(object);
  (void)_this;
}
void exit_room_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void exit_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const exit_room_req& exit_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_exit_room_req_cs_2eproto.base);
  return *internal_default_instance();
}


void exit_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:main.exit_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    room_id_ = 0;
    id_ = 2008;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exit_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = exit_room_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_room_id(&has_bits);
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_room_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.exit_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = exit_room_req_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 room_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.exit_room_req)
  return target;
}

size_t exit_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.exit_room_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 room_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_room_id());
    }

    // optional .main.proto_id id = 1 [default = exit_room_req_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void exit_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.exit_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<exit_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.exit_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.exit_room_req)
    MergeFrom(*source);
  }
}

void exit_room_req::MergeFrom(const exit_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.exit_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      room_id_ = from.room_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void exit_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.exit_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_room_req::CopyFrom(const exit_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.exit_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_room_req::IsInitialized() const {
  return true;
}

void exit_room_req::InternalSwap(exit_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(room_id_, other->room_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class exit_room_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<exit_room_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

exit_room_resp::exit_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.exit_room_resp)
}
exit_room_resp::exit_room_resp(const exit_room_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:main.exit_room_resp)
}

void exit_room_resp::SharedCtor() {
  error_ = 0;
  id_ = 2009;
}

exit_room_resp::~exit_room_resp() {
  // @@protoc_insertion_point(destructor:main.exit_room_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void exit_room_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void exit_room_resp::ArenaDtor(void* object) {
  exit_room_resp* _this = reinterpret_cast< exit_room_resp* >(object);
  (void)_this;
}
void exit_room_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void exit_room_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const exit_room_resp& exit_room_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_exit_room_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void exit_room_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:main.exit_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    error_ = 0;
    id_ = 2009;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exit_room_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .main.proto_id id = 1 [default = exit_room_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::main::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .main.error_id error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::main::error_id_IsValid(val))) {
            _internal_set_error(static_cast<::main::error_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_room_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.exit_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .main.proto_id id = 1 [default = exit_room_resp_id];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .main.error_id error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.exit_room_resp)
  return target;
}

size_t exit_room_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.exit_room_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .main.error_id error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

    // optional .main.proto_id id = 1 [default = exit_room_resp_id];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void exit_room_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:main.exit_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_room_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<exit_room_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:main.exit_room_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:main.exit_room_resp)
    MergeFrom(*source);
  }
}

void exit_room_resp::MergeFrom(const exit_room_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.exit_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void exit_room_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:main.exit_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_room_resp::CopyFrom(const exit_room_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.exit_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_room_resp::IsInitialized() const {
  return true;
}

void exit_room_resp::InternalSwap(exit_room_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_room_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::main::login_req* Arena::CreateMaybeMessage< ::main::login_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::login_resp* Arena::CreateMaybeMessage< ::main::login_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::login_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::get_all_room_list_req* Arena::CreateMaybeMessage< ::main::get_all_room_list_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::get_all_room_list_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::get_all_room_list_resp* Arena::CreateMaybeMessage< ::main::get_all_room_list_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::get_all_room_list_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::create_room_req* Arena::CreateMaybeMessage< ::main::create_room_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::create_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::room_settings* Arena::CreateMaybeMessage< ::main::room_settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::room_settings >(arena);
}
template<> PROTOBUF_NOINLINE ::main::create_room_resp* Arena::CreateMaybeMessage< ::main::create_room_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::create_room_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::dismiss_room_req* Arena::CreateMaybeMessage< ::main::dismiss_room_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::dismiss_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::dismiss_room_resp* Arena::CreateMaybeMessage< ::main::dismiss_room_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::dismiss_room_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::change_room_settings_req* Arena::CreateMaybeMessage< ::main::change_room_settings_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::change_room_settings_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::change_room_settings_resp* Arena::CreateMaybeMessage< ::main::change_room_settings_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::change_room_settings_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::change_room_settings_ntf* Arena::CreateMaybeMessage< ::main::change_room_settings_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::change_room_settings_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::main::join_room_req* Arena::CreateMaybeMessage< ::main::join_room_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::join_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::join_settings* Arena::CreateMaybeMessage< ::main::join_settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::join_settings >(arena);
}
template<> PROTOBUF_NOINLINE ::main::get_room_all_member_req* Arena::CreateMaybeMessage< ::main::get_room_all_member_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::get_room_all_member_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::get_room_all_member_resp* Arena::CreateMaybeMessage< ::main::get_room_all_member_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::get_room_all_member_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::join_room_resp* Arena::CreateMaybeMessage< ::main::join_room_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::join_room_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::change_join_settings_req* Arena::CreateMaybeMessage< ::main::change_join_settings_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::change_join_settings_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::change_join_settings_resp* Arena::CreateMaybeMessage< ::main::change_join_settings_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::change_join_settings_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::send_info_req* Arena::CreateMaybeMessage< ::main::send_info_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::send_info_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::send_info_resp* Arena::CreateMaybeMessage< ::main::send_info_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::send_info_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::main::recv_info_ntf* Arena::CreateMaybeMessage< ::main::recv_info_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::recv_info_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::main::exit_room_req* Arena::CreateMaybeMessage< ::main::exit_room_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::exit_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::main::exit_room_resp* Arena::CreateMaybeMessage< ::main::exit_room_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::exit_room_resp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
