// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs.proto

#include "cs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cs {
class login_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<login_req> _instance;
} _login_req_default_instance_;
class login_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<login_resp> _instance;
} _login_resp_default_instance_;
class create_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_room_req> _instance;
} _create_room_req_default_instance_;
class create_room_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_room_resp> _instance;
} _create_room_resp_default_instance_;
class open_door_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<open_door_req> _instance;
} _open_door_req_default_instance_;
class open_door_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<open_door_resp> _instance;
} _open_door_resp_default_instance_;
class close_door_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<close_door_req> _instance;
} _close_door_req_default_instance_;
class close_door_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<close_door_resp> _instance;
} _close_door_resp_default_instance_;
class join_room_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<join_room_req> _instance;
} _join_room_req_default_instance_;
class join_room_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<join_room_resp> _instance;
} _join_room_resp_default_instance_;
}  // namespace cs
static void InitDefaultsscc_info_close_door_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_close_door_req_default_instance_;
    new (ptr) ::cs::close_door_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_close_door_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_close_door_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_close_door_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_close_door_resp_default_instance_;
    new (ptr) ::cs::close_door_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_close_door_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_close_door_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_create_room_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_create_room_req_default_instance_;
    new (ptr) ::cs::create_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_create_room_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_create_room_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_create_room_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_create_room_resp_default_instance_;
    new (ptr) ::cs::create_room_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_create_room_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_create_room_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_join_room_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_join_room_req_default_instance_;
    new (ptr) ::cs::join_room_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_join_room_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_join_room_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_join_room_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_join_room_resp_default_instance_;
    new (ptr) ::cs::join_room_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_join_room_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_join_room_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_login_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_login_req_default_instance_;
    new (ptr) ::cs::login_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_login_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_login_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_login_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_login_resp_default_instance_;
    new (ptr) ::cs::login_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_login_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_login_resp_cs_2eproto}, {}};

static void InitDefaultsscc_info_open_door_req_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_open_door_req_default_instance_;
    new (ptr) ::cs::open_door_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_open_door_req_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_open_door_req_cs_2eproto}, {}};

static void InitDefaultsscc_info_open_door_resp_cs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cs::_open_door_resp_default_instance_;
    new (ptr) ::cs::open_door_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_open_door_resp_cs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_open_door_resp_cs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cs_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cs_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cs::login_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::login_req, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::login_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::login_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::login_resp, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::create_room_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::create_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::create_room_req, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::create_room_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::create_room_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::create_room_resp, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::open_door_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::open_door_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::open_door_req, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::open_door_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::open_door_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::open_door_resp, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::close_door_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::close_door_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::close_door_req, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::close_door_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::close_door_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::close_door_resp, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::join_room_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::join_room_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::join_room_req, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::cs::join_room_resp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cs::join_room_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cs::join_room_resp, id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::cs::login_req)},
  { 7, 13, sizeof(::cs::login_resp)},
  { 14, 20, sizeof(::cs::create_room_req)},
  { 21, 27, sizeof(::cs::create_room_resp)},
  { 28, 34, sizeof(::cs::open_door_req)},
  { 35, 41, sizeof(::cs::open_door_resp)},
  { 42, 48, sizeof(::cs::close_door_req)},
  { 49, 55, sizeof(::cs::close_door_resp)},
  { 56, 62, sizeof(::cs::join_room_req)},
  { 63, 69, sizeof(::cs::join_room_resp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_login_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_login_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_create_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_create_room_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_open_door_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_open_door_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_close_door_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_close_door_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_join_room_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_join_room_resp_default_instance_),
};

const char descriptor_table_protodef_cs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010cs.proto\022\002cs\"3\n\tlogin_req\022&\n\002id\030\001 \002(\0162"
  "\014.cs.proto_id:\014login_req_id\"5\n\nlogin_res"
  "p\022\'\n\002id\030\001 \002(\0162\014.cs.proto_id:\rlogin_resp_"
  "id\"\?\n\017create_room_req\022,\n\002id\030\001 \002(\0162\014.cs.p"
  "roto_id:\022create_room_req_id\"A\n\020create_ro"
  "om_resp\022-\n\002id\030\001 \002(\0162\014.cs.proto_id:\023creat"
  "e_room_resp_id\";\n\ropen_door_req\022*\n\002id\030\001 "
  "\002(\0162\014.cs.proto_id:\020open_door_req_id\"=\n\016o"
  "pen_door_resp\022+\n\002id\030\001 \002(\0162\014.cs.proto_id:"
  "\021open_door_resp_id\"=\n\016close_door_req\022+\n\002"
  "id\030\001 \002(\0162\014.cs.proto_id:\021close_door_req_i"
  "d\"\?\n\017close_door_resp\022,\n\002id\030\001 \002(\0162\014.cs.pr"
  "oto_id:\022close_door_resp_id\";\n\rjoin_room_"
  "req\022*\n\002id\030\001 \002(\0162\014.cs.proto_id:\020join_room"
  "_req_id\"=\n\016join_room_resp\022+\n\002id\030\001 \002(\0162\014."
  "cs.proto_id:\021join_room_resp_id*\351\001\n\010proto"
  "_id\022\020\n\014login_req_id\020\001\022\021\n\rlogin_resp_id\020\002"
  "\022\026\n\022create_room_req_id\020\003\022\027\n\023create_room_"
  "resp_id\020\004\022\024\n\020open_door_req_id\020\005\022\025\n\021open_"
  "door_resp_id\020\006\022\025\n\021close_door_req_id\020\007\022\026\n"
  "\022close_door_resp_id\020\010\022\024\n\020join_room_req_i"
  "d\020\t\022\025\n\021join_room_resp_id\020\n"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cs_2eproto_sccs[10] = {
  &scc_info_close_door_req_cs_2eproto.base,
  &scc_info_close_door_resp_cs_2eproto.base,
  &scc_info_create_room_req_cs_2eproto.base,
  &scc_info_create_room_resp_cs_2eproto.base,
  &scc_info_join_room_req_cs_2eproto.base,
  &scc_info_join_room_resp_cs_2eproto.base,
  &scc_info_login_req_cs_2eproto.base,
  &scc_info_login_resp_cs_2eproto.base,
  &scc_info_open_door_req_cs_2eproto.base,
  &scc_info_open_door_resp_cs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_2eproto = {
  false, false, descriptor_table_protodef_cs_2eproto, "cs.proto", 866,
  &descriptor_table_cs_2eproto_once, descriptor_table_cs_2eproto_sccs, descriptor_table_cs_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_cs_2eproto::offsets,
  file_level_metadata_cs_2eproto, 10, file_level_enum_descriptors_cs_2eproto, file_level_service_descriptors_cs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cs_2eproto)), true);
namespace cs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* proto_id_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cs_2eproto);
  return file_level_enum_descriptors_cs_2eproto[0];
}
bool proto_id_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class login_req::_Internal {
 public:
  using HasBits = decltype(std::declval<login_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

login_req::login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.login_req)
}
login_req::login_req(const login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.login_req)
}

void login_req::SharedCtor() {
  id_ = 1;
}

login_req::~login_req() {
  // @@protoc_insertion_point(destructor:cs.login_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void login_req::ArenaDtor(void* object) {
  login_req* _this = reinterpret_cast< login_req* >(object);
  (void)_this;
}
void login_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_req& login_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_login_req_cs_2eproto.base);
  return *internal_default_instance();
}


void login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = login_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = login_req_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.login_req)
  return target;
}

size_t login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.login_req)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = login_req_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.login_req)
  GOOGLE_DCHECK_NE(&from, this);
  const login_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.login_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.login_req)
    MergeFrom(*source);
  }
}

void login_req::MergeFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.login_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void login_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_req::CopyFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_req::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void login_req::InternalSwap(login_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class login_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<login_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

login_resp::login_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.login_resp)
}
login_resp::login_resp(const login_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.login_resp)
}

void login_resp::SharedCtor() {
  id_ = 2;
}

login_resp::~login_resp() {
  // @@protoc_insertion_point(destructor:cs.login_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void login_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void login_resp::ArenaDtor(void* object) {
  login_resp* _this = reinterpret_cast< login_resp* >(object);
  (void)_this;
}
void login_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const login_resp& login_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_login_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void login_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.login_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = login_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* login_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.login_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = login_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.login_resp)
  return target;
}

size_t login_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.login_resp)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = login_resp_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void login_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.login_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const login_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<login_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.login_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.login_resp)
    MergeFrom(*source);
  }
}

void login_resp::MergeFrom(const login_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.login_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void login_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.login_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_resp::CopyFrom(const login_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.login_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_resp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void login_resp::InternalSwap(login_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class create_room_req::_Internal {
 public:
  using HasBits = decltype(std::declval<create_room_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

create_room_req::create_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.create_room_req)
}
create_room_req::create_room_req(const create_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.create_room_req)
}

void create_room_req::SharedCtor() {
  id_ = 3;
}

create_room_req::~create_room_req() {
  // @@protoc_insertion_point(destructor:cs.create_room_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_room_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void create_room_req::ArenaDtor(void* object) {
  create_room_req* _this = reinterpret_cast< create_room_req* >(object);
  (void)_this;
}
void create_room_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_room_req& create_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_room_req_cs_2eproto.base);
  return *internal_default_instance();
}


void create_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.create_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 3;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = create_room_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_room_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.create_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = create_room_req_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.create_room_req)
  return target;
}

size_t create_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.create_room_req)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = create_room_req_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.create_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const create_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.create_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.create_room_req)
    MergeFrom(*source);
  }
}

void create_room_req::MergeFrom(const create_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.create_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void create_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.create_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_room_req::CopyFrom(const create_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.create_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_room_req::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void create_room_req::InternalSwap(create_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class create_room_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<create_room_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

create_room_resp::create_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.create_room_resp)
}
create_room_resp::create_room_resp(const create_room_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.create_room_resp)
}

void create_room_resp::SharedCtor() {
  id_ = 4;
}

create_room_resp::~create_room_resp() {
  // @@protoc_insertion_point(destructor:cs.create_room_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_room_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void create_room_resp::ArenaDtor(void* object) {
  create_room_resp* _this = reinterpret_cast< create_room_resp* >(object);
  (void)_this;
}
void create_room_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_room_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_room_resp& create_room_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_room_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void create_room_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.create_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 4;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_room_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = create_room_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_room_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.create_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = create_room_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.create_room_resp)
  return target;
}

size_t create_room_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.create_room_resp)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = create_room_resp_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_room_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.create_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const create_room_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_room_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.create_room_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.create_room_resp)
    MergeFrom(*source);
  }
}

void create_room_resp::MergeFrom(const create_room_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.create_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void create_room_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.create_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_room_resp::CopyFrom(const create_room_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.create_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_room_resp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void create_room_resp::InternalSwap(create_room_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata create_room_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class open_door_req::_Internal {
 public:
  using HasBits = decltype(std::declval<open_door_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

open_door_req::open_door_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.open_door_req)
}
open_door_req::open_door_req(const open_door_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.open_door_req)
}

void open_door_req::SharedCtor() {
  id_ = 5;
}

open_door_req::~open_door_req() {
  // @@protoc_insertion_point(destructor:cs.open_door_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void open_door_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void open_door_req::ArenaDtor(void* object) {
  open_door_req* _this = reinterpret_cast< open_door_req* >(object);
  (void)_this;
}
void open_door_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void open_door_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const open_door_req& open_door_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_open_door_req_cs_2eproto.base);
  return *internal_default_instance();
}


void open_door_req::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.open_door_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* open_door_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = open_door_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* open_door_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.open_door_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = open_door_req_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.open_door_req)
  return target;
}

size_t open_door_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.open_door_req)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = open_door_req_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void open_door_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.open_door_req)
  GOOGLE_DCHECK_NE(&from, this);
  const open_door_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<open_door_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.open_door_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.open_door_req)
    MergeFrom(*source);
  }
}

void open_door_req::MergeFrom(const open_door_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.open_door_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void open_door_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.open_door_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_door_req::CopyFrom(const open_door_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.open_door_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_door_req::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void open_door_req::InternalSwap(open_door_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata open_door_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class open_door_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<open_door_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

open_door_resp::open_door_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.open_door_resp)
}
open_door_resp::open_door_resp(const open_door_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.open_door_resp)
}

void open_door_resp::SharedCtor() {
  id_ = 6;
}

open_door_resp::~open_door_resp() {
  // @@protoc_insertion_point(destructor:cs.open_door_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void open_door_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void open_door_resp::ArenaDtor(void* object) {
  open_door_resp* _this = reinterpret_cast< open_door_resp* >(object);
  (void)_this;
}
void open_door_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void open_door_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const open_door_resp& open_door_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_open_door_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void open_door_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.open_door_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 6;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* open_door_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = open_door_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* open_door_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.open_door_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = open_door_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.open_door_resp)
  return target;
}

size_t open_door_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.open_door_resp)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = open_door_resp_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void open_door_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.open_door_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const open_door_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<open_door_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.open_door_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.open_door_resp)
    MergeFrom(*source);
  }
}

void open_door_resp::MergeFrom(const open_door_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.open_door_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void open_door_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.open_door_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_door_resp::CopyFrom(const open_door_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.open_door_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_door_resp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void open_door_resp::InternalSwap(open_door_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata open_door_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class close_door_req::_Internal {
 public:
  using HasBits = decltype(std::declval<close_door_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

close_door_req::close_door_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.close_door_req)
}
close_door_req::close_door_req(const close_door_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.close_door_req)
}

void close_door_req::SharedCtor() {
  id_ = 7;
}

close_door_req::~close_door_req() {
  // @@protoc_insertion_point(destructor:cs.close_door_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void close_door_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void close_door_req::ArenaDtor(void* object) {
  close_door_req* _this = reinterpret_cast< close_door_req* >(object);
  (void)_this;
}
void close_door_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void close_door_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const close_door_req& close_door_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_close_door_req_cs_2eproto.base);
  return *internal_default_instance();
}


void close_door_req::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.close_door_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 7;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* close_door_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = close_door_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* close_door_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.close_door_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = close_door_req_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.close_door_req)
  return target;
}

size_t close_door_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.close_door_req)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = close_door_req_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void close_door_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.close_door_req)
  GOOGLE_DCHECK_NE(&from, this);
  const close_door_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<close_door_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.close_door_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.close_door_req)
    MergeFrom(*source);
  }
}

void close_door_req::MergeFrom(const close_door_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.close_door_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void close_door_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.close_door_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void close_door_req::CopyFrom(const close_door_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.close_door_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool close_door_req::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void close_door_req::InternalSwap(close_door_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata close_door_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class close_door_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<close_door_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

close_door_resp::close_door_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.close_door_resp)
}
close_door_resp::close_door_resp(const close_door_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.close_door_resp)
}

void close_door_resp::SharedCtor() {
  id_ = 8;
}

close_door_resp::~close_door_resp() {
  // @@protoc_insertion_point(destructor:cs.close_door_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void close_door_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void close_door_resp::ArenaDtor(void* object) {
  close_door_resp* _this = reinterpret_cast< close_door_resp* >(object);
  (void)_this;
}
void close_door_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void close_door_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const close_door_resp& close_door_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_close_door_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void close_door_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.close_door_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 8;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* close_door_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = close_door_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* close_door_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.close_door_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = close_door_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.close_door_resp)
  return target;
}

size_t close_door_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.close_door_resp)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = close_door_resp_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void close_door_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.close_door_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const close_door_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<close_door_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.close_door_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.close_door_resp)
    MergeFrom(*source);
  }
}

void close_door_resp::MergeFrom(const close_door_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.close_door_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void close_door_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.close_door_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void close_door_resp::CopyFrom(const close_door_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.close_door_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool close_door_resp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void close_door_resp::InternalSwap(close_door_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata close_door_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class join_room_req::_Internal {
 public:
  using HasBits = decltype(std::declval<join_room_req>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

join_room_req::join_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.join_room_req)
}
join_room_req::join_room_req(const join_room_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.join_room_req)
}

void join_room_req::SharedCtor() {
  id_ = 9;
}

join_room_req::~join_room_req() {
  // @@protoc_insertion_point(destructor:cs.join_room_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void join_room_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void join_room_req::ArenaDtor(void* object) {
  join_room_req* _this = reinterpret_cast< join_room_req* >(object);
  (void)_this;
}
void join_room_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void join_room_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const join_room_req& join_room_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_join_room_req_cs_2eproto.base);
  return *internal_default_instance();
}


void join_room_req::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.join_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 9;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* join_room_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = join_room_req_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* join_room_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.join_room_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = join_room_req_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.join_room_req)
  return target;
}

size_t join_room_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.join_room_req)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = join_room_req_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void join_room_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.join_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  const join_room_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<join_room_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.join_room_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.join_room_req)
    MergeFrom(*source);
  }
}

void join_room_req::MergeFrom(const join_room_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.join_room_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void join_room_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.join_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_room_req::CopyFrom(const join_room_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.join_room_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_room_req::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void join_room_req::InternalSwap(join_room_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata join_room_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class join_room_resp::_Internal {
 public:
  using HasBits = decltype(std::declval<join_room_resp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

join_room_resp::join_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cs.join_room_resp)
}
join_room_resp::join_room_resp(const join_room_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cs.join_room_resp)
}

void join_room_resp::SharedCtor() {
  id_ = 10;
}

join_room_resp::~join_room_resp() {
  // @@protoc_insertion_point(destructor:cs.join_room_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void join_room_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void join_room_resp::ArenaDtor(void* object) {
  join_room_resp* _this = reinterpret_cast< join_room_resp* >(object);
  (void)_this;
}
void join_room_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void join_room_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const join_room_resp& join_room_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_join_room_resp_cs_2eproto.base);
  return *internal_default_instance();
}


void join_room_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.join_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* join_room_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .cs.proto_id id = 1 [default = join_room_resp_id];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cs::proto_id_IsValid(val))) {
            _internal_set_id(static_cast<::cs::proto_id>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* join_room_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.join_room_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cs.proto_id id = 1 [default = join_room_resp_id];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.join_room_resp)
  return target;
}

size_t join_room_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.join_room_resp)
  size_t total_size = 0;

  // required .cs.proto_id id = 1 [default = join_room_resp_id];
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void join_room_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cs.join_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const join_room_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<join_room_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cs.join_room_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cs.join_room_resp)
    MergeFrom(*source);
  }
}

void join_room_resp::MergeFrom(const join_room_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.join_room_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void join_room_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cs.join_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void join_room_resp::CopyFrom(const join_room_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.join_room_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool join_room_resp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void join_room_resp::InternalSwap(join_room_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata join_room_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cs::login_req* Arena::CreateMaybeMessage< ::cs::login_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::login_resp* Arena::CreateMaybeMessage< ::cs::login_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::login_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::create_room_req* Arena::CreateMaybeMessage< ::cs::create_room_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::create_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::create_room_resp* Arena::CreateMaybeMessage< ::cs::create_room_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::create_room_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::open_door_req* Arena::CreateMaybeMessage< ::cs::open_door_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::open_door_req >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::open_door_resp* Arena::CreateMaybeMessage< ::cs::open_door_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::open_door_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::close_door_req* Arena::CreateMaybeMessage< ::cs::close_door_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::close_door_req >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::close_door_resp* Arena::CreateMaybeMessage< ::cs::close_door_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::close_door_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::join_room_req* Arena::CreateMaybeMessage< ::cs::join_room_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::join_room_req >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::join_room_resp* Arena::CreateMaybeMessage< ::cs::join_room_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::join_room_resp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
