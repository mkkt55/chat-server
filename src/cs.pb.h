// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_2eproto;
namespace main {
class change_join_settings_req;
class change_join_settings_reqDefaultTypeInternal;
extern change_join_settings_reqDefaultTypeInternal _change_join_settings_req_default_instance_;
class change_join_settings_resp;
class change_join_settings_respDefaultTypeInternal;
extern change_join_settings_respDefaultTypeInternal _change_join_settings_resp_default_instance_;
class change_room_settings_ntf;
class change_room_settings_ntfDefaultTypeInternal;
extern change_room_settings_ntfDefaultTypeInternal _change_room_settings_ntf_default_instance_;
class change_room_settings_req;
class change_room_settings_reqDefaultTypeInternal;
extern change_room_settings_reqDefaultTypeInternal _change_room_settings_req_default_instance_;
class change_room_settings_resp;
class change_room_settings_respDefaultTypeInternal;
extern change_room_settings_respDefaultTypeInternal _change_room_settings_resp_default_instance_;
class create_room_req;
class create_room_reqDefaultTypeInternal;
extern create_room_reqDefaultTypeInternal _create_room_req_default_instance_;
class create_room_resp;
class create_room_respDefaultTypeInternal;
extern create_room_respDefaultTypeInternal _create_room_resp_default_instance_;
class dismiss_room_req;
class dismiss_room_reqDefaultTypeInternal;
extern dismiss_room_reqDefaultTypeInternal _dismiss_room_req_default_instance_;
class dismiss_room_resp;
class dismiss_room_respDefaultTypeInternal;
extern dismiss_room_respDefaultTypeInternal _dismiss_room_resp_default_instance_;
class exit_room_req;
class exit_room_reqDefaultTypeInternal;
extern exit_room_reqDefaultTypeInternal _exit_room_req_default_instance_;
class exit_room_resp;
class exit_room_respDefaultTypeInternal;
extern exit_room_respDefaultTypeInternal _exit_room_resp_default_instance_;
class get_all_room_list_req;
class get_all_room_list_reqDefaultTypeInternal;
extern get_all_room_list_reqDefaultTypeInternal _get_all_room_list_req_default_instance_;
class get_all_room_list_resp;
class get_all_room_list_respDefaultTypeInternal;
extern get_all_room_list_respDefaultTypeInternal _get_all_room_list_resp_default_instance_;
class join_room_req;
class join_room_reqDefaultTypeInternal;
extern join_room_reqDefaultTypeInternal _join_room_req_default_instance_;
class join_room_resp;
class join_room_respDefaultTypeInternal;
extern join_room_respDefaultTypeInternal _join_room_resp_default_instance_;
class join_settings;
class join_settingsDefaultTypeInternal;
extern join_settingsDefaultTypeInternal _join_settings_default_instance_;
class login_req;
class login_reqDefaultTypeInternal;
extern login_reqDefaultTypeInternal _login_req_default_instance_;
class login_resp;
class login_respDefaultTypeInternal;
extern login_respDefaultTypeInternal _login_resp_default_instance_;
class recv_info_ntf;
class recv_info_ntfDefaultTypeInternal;
extern recv_info_ntfDefaultTypeInternal _recv_info_ntf_default_instance_;
class room_settings;
class room_settingsDefaultTypeInternal;
extern room_settingsDefaultTypeInternal _room_settings_default_instance_;
class send_info_req;
class send_info_reqDefaultTypeInternal;
extern send_info_reqDefaultTypeInternal _send_info_req_default_instance_;
class send_info_resp;
class send_info_respDefaultTypeInternal;
extern send_info_respDefaultTypeInternal _send_info_resp_default_instance_;
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> ::main::change_join_settings_req* Arena::CreateMaybeMessage<::main::change_join_settings_req>(Arena*);
template<> ::main::change_join_settings_resp* Arena::CreateMaybeMessage<::main::change_join_settings_resp>(Arena*);
template<> ::main::change_room_settings_ntf* Arena::CreateMaybeMessage<::main::change_room_settings_ntf>(Arena*);
template<> ::main::change_room_settings_req* Arena::CreateMaybeMessage<::main::change_room_settings_req>(Arena*);
template<> ::main::change_room_settings_resp* Arena::CreateMaybeMessage<::main::change_room_settings_resp>(Arena*);
template<> ::main::create_room_req* Arena::CreateMaybeMessage<::main::create_room_req>(Arena*);
template<> ::main::create_room_resp* Arena::CreateMaybeMessage<::main::create_room_resp>(Arena*);
template<> ::main::dismiss_room_req* Arena::CreateMaybeMessage<::main::dismiss_room_req>(Arena*);
template<> ::main::dismiss_room_resp* Arena::CreateMaybeMessage<::main::dismiss_room_resp>(Arena*);
template<> ::main::exit_room_req* Arena::CreateMaybeMessage<::main::exit_room_req>(Arena*);
template<> ::main::exit_room_resp* Arena::CreateMaybeMessage<::main::exit_room_resp>(Arena*);
template<> ::main::get_all_room_list_req* Arena::CreateMaybeMessage<::main::get_all_room_list_req>(Arena*);
template<> ::main::get_all_room_list_resp* Arena::CreateMaybeMessage<::main::get_all_room_list_resp>(Arena*);
template<> ::main::join_room_req* Arena::CreateMaybeMessage<::main::join_room_req>(Arena*);
template<> ::main::join_room_resp* Arena::CreateMaybeMessage<::main::join_room_resp>(Arena*);
template<> ::main::join_settings* Arena::CreateMaybeMessage<::main::join_settings>(Arena*);
template<> ::main::login_req* Arena::CreateMaybeMessage<::main::login_req>(Arena*);
template<> ::main::login_resp* Arena::CreateMaybeMessage<::main::login_resp>(Arena*);
template<> ::main::recv_info_ntf* Arena::CreateMaybeMessage<::main::recv_info_ntf>(Arena*);
template<> ::main::room_settings* Arena::CreateMaybeMessage<::main::room_settings>(Arena*);
template<> ::main::send_info_req* Arena::CreateMaybeMessage<::main::send_info_req>(Arena*);
template<> ::main::send_info_resp* Arena::CreateMaybeMessage<::main::send_info_resp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace main {

enum proto_id : int {
  login_req_id = 1,
  login_resp_id = 2,
  get_all_room_list_req_id = 1001,
  get_all_room_list_resp_id = 1002,
  create_room_req_id = 1003,
  create_room_resp_id = 1004,
  dismiss_room_req_id = 1005,
  dismiss_room_resp_id = 1006,
  change_room_settings_req_id = 1007,
  change_room_settings_resp_id = 1008,
  change_room_settings_ntf_id = 1009,
  join_room_req_id = 2001,
  join_room_resp_id = 2002,
  change_join_settings_req_id = 2003,
  change_join_settings_resp_id = 2004,
  send_info_req_id = 2005,
  send_info_resp_id = 2006,
  recv_info_ntf_id = 2007,
  exit_room_req_id = 2008,
  exit_room_resp_id = 2009
};
bool proto_id_IsValid(int value);
constexpr proto_id proto_id_MIN = login_req_id;
constexpr proto_id proto_id_MAX = exit_room_resp_id;
constexpr int proto_id_ARRAYSIZE = proto_id_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* proto_id_descriptor();
template<typename T>
inline const std::string& proto_id_Name(T enum_t_value) {
  static_assert(::std::is_same<T, proto_id>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function proto_id_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    proto_id_descriptor(), enum_t_value);
}
inline bool proto_id_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, proto_id* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<proto_id>(
    proto_id_descriptor(), name, value);
}
enum error_id : int {
  err_none = 0,
  err_unknown = 1,
  err_parsing_proto = 2,
  err_room_name_invalid = 1001,
  err_room_id_not_exist = 1002,
  err_opt_disallowed_not_room_holder = 1003,
  err_join_room_name_invalid = 2001
};
bool error_id_IsValid(int value);
constexpr error_id error_id_MIN = err_none;
constexpr error_id error_id_MAX = err_join_room_name_invalid;
constexpr int error_id_ARRAYSIZE = error_id_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* error_id_descriptor();
template<typename T>
inline const std::string& error_id_Name(T enum_t_value) {
  static_assert(::std::is_same<T, error_id>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function error_id_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    error_id_descriptor(), enum_t_value);
}
inline bool error_id_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, error_id* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<error_id>(
    error_id_descriptor(), name, value);
}
// ===================================================================

class login_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.login_req) */ {
 public:
  inline login_req() : login_req(nullptr) {}
  virtual ~login_req();

  login_req(const login_req& from);
  login_req(login_req&& from) noexcept
    : login_req() {
    *this = ::std::move(from);
  }

  inline login_req& operator=(const login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_req& operator=(login_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_req& default_instance();

  static inline const login_req* internal_default_instance() {
    return reinterpret_cast<const login_req*>(
               &_login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(login_req& a, login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(login_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_req* New() const final {
    return CreateMaybeMessage<login_req>(nullptr);
  }

  login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_req& from);
  void MergeFrom(const login_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.login_req";
  }
  protected:
  explicit login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string auth = 2;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // optional .main.proto_id id = 1 [default = login_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.login_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class login_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.login_resp) */ {
 public:
  inline login_resp() : login_resp(nullptr) {}
  virtual ~login_resp();

  login_resp(const login_resp& from);
  login_resp(login_resp&& from) noexcept
    : login_resp() {
    *this = ::std::move(from);
  }

  inline login_resp& operator=(const login_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_resp& operator=(login_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const login_resp& default_instance();

  static inline const login_resp* internal_default_instance() {
    return reinterpret_cast<const login_resp*>(
               &_login_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_resp& a, login_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(login_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline login_resp* New() const final {
    return CreateMaybeMessage<login_resp>(nullptr);
  }

  login_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<login_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const login_resp& from);
  void MergeFrom(const login_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.login_resp";
  }
  protected:
  explicit login_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 3,
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string auth = 3;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = login_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.login_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class get_all_room_list_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.get_all_room_list_req) */ {
 public:
  inline get_all_room_list_req() : get_all_room_list_req(nullptr) {}
  virtual ~get_all_room_list_req();

  get_all_room_list_req(const get_all_room_list_req& from);
  get_all_room_list_req(get_all_room_list_req&& from) noexcept
    : get_all_room_list_req() {
    *this = ::std::move(from);
  }

  inline get_all_room_list_req& operator=(const get_all_room_list_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_all_room_list_req& operator=(get_all_room_list_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_all_room_list_req& default_instance();

  static inline const get_all_room_list_req* internal_default_instance() {
    return reinterpret_cast<const get_all_room_list_req*>(
               &_get_all_room_list_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(get_all_room_list_req& a, get_all_room_list_req& b) {
    a.Swap(&b);
  }
  inline void Swap(get_all_room_list_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_all_room_list_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_all_room_list_req* New() const final {
    return CreateMaybeMessage<get_all_room_list_req>(nullptr);
  }

  get_all_room_list_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_all_room_list_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_all_room_list_req& from);
  void MergeFrom(const get_all_room_list_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_all_room_list_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.get_all_room_list_req";
  }
  protected:
  explicit get_all_room_list_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .main.proto_id id = 1 [default = get_all_room_list_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.get_all_room_list_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class get_all_room_list_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.get_all_room_list_resp) */ {
 public:
  inline get_all_room_list_resp() : get_all_room_list_resp(nullptr) {}
  virtual ~get_all_room_list_resp();

  get_all_room_list_resp(const get_all_room_list_resp& from);
  get_all_room_list_resp(get_all_room_list_resp&& from) noexcept
    : get_all_room_list_resp() {
    *this = ::std::move(from);
  }

  inline get_all_room_list_resp& operator=(const get_all_room_list_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_all_room_list_resp& operator=(get_all_room_list_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_all_room_list_resp& default_instance();

  static inline const get_all_room_list_resp* internal_default_instance() {
    return reinterpret_cast<const get_all_room_list_resp*>(
               &_get_all_room_list_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(get_all_room_list_resp& a, get_all_room_list_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(get_all_room_list_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_all_room_list_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_all_room_list_resp* New() const final {
    return CreateMaybeMessage<get_all_room_list_resp>(nullptr);
  }

  get_all_room_list_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_all_room_list_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_all_room_list_resp& from);
  void MergeFrom(const get_all_room_list_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_all_room_list_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.get_all_room_list_resp";
  }
  protected:
  explicit get_all_room_list_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated int32 room_ids = 2;
  int room_ids_size() const;
  private:
  int _internal_room_ids_size() const;
  public:
  void clear_room_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_room_ids() const;
  void _internal_add_room_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_room_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 room_ids(int index) const;
  void set_room_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_room_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      room_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_room_ids();

  // optional .main.proto_id id = 1 [default = get_all_room_list_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.get_all_room_list_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > room_ids_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class create_room_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.create_room_req) */ {
 public:
  inline create_room_req() : create_room_req(nullptr) {}
  virtual ~create_room_req();

  create_room_req(const create_room_req& from);
  create_room_req(create_room_req&& from) noexcept
    : create_room_req() {
    *this = ::std::move(from);
  }

  inline create_room_req& operator=(const create_room_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline create_room_req& operator=(create_room_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const create_room_req& default_instance();

  static inline const create_room_req* internal_default_instance() {
    return reinterpret_cast<const create_room_req*>(
               &_create_room_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(create_room_req& a, create_room_req& b) {
    a.Swap(&b);
  }
  inline void Swap(create_room_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(create_room_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline create_room_req* New() const final {
    return CreateMaybeMessage<create_room_req>(nullptr);
  }

  create_room_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<create_room_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const create_room_req& from);
  void MergeFrom(const create_room_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_room_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.create_room_req";
  }
  protected:
  explicit create_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.room_settings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::main::room_settings& settings() const;
  ::main::room_settings* release_settings();
  ::main::room_settings* mutable_settings();
  void set_allocated_settings(::main::room_settings* settings);
  private:
  const ::main::room_settings& _internal_settings() const;
  ::main::room_settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::main::room_settings* settings);
  ::main::room_settings* unsafe_arena_release_settings();

  // optional .main.proto_id id = 1 [default = create_room_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.create_room_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::main::room_settings* settings_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class room_settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.room_settings) */ {
 public:
  inline room_settings() : room_settings(nullptr) {}
  virtual ~room_settings();

  room_settings(const room_settings& from);
  room_settings(room_settings&& from) noexcept
    : room_settings() {
    *this = ::std::move(from);
  }

  inline room_settings& operator=(const room_settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline room_settings& operator=(room_settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const room_settings& default_instance();

  static inline const room_settings* internal_default_instance() {
    return reinterpret_cast<const room_settings*>(
               &_room_settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(room_settings& a, room_settings& b) {
    a.Swap(&b);
  }
  inline void Swap(room_settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(room_settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline room_settings* New() const final {
    return CreateMaybeMessage<room_settings>(nullptr);
  }

  room_settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<room_settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const room_settings& from);
  void MergeFrom(const room_settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(room_settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.room_settings";
  }
  protected:
  explicit room_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kOpenFieldNumber = 2,
  };
  // optional string room_name = 1;
  bool has_room_name() const;
  private:
  bool _internal_has_room_name() const;
  public:
  void clear_room_name();
  const std::string& room_name() const;
  void set_room_name(const std::string& value);
  void set_room_name(std::string&& value);
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  std::string* mutable_room_name();
  std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // optional bool open = 2 [default = true];
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:main.room_settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
  bool open_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class create_room_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.create_room_resp) */ {
 public:
  inline create_room_resp() : create_room_resp(nullptr) {}
  virtual ~create_room_resp();

  create_room_resp(const create_room_resp& from);
  create_room_resp(create_room_resp&& from) noexcept
    : create_room_resp() {
    *this = ::std::move(from);
  }

  inline create_room_resp& operator=(const create_room_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline create_room_resp& operator=(create_room_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const create_room_resp& default_instance();

  static inline const create_room_resp* internal_default_instance() {
    return reinterpret_cast<const create_room_resp*>(
               &_create_room_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(create_room_resp& a, create_room_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(create_room_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(create_room_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline create_room_resp* New() const final {
    return CreateMaybeMessage<create_room_resp>(nullptr);
  }

  create_room_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<create_room_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const create_room_resp& from);
  void MergeFrom(const create_room_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_room_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.create_room_resp";
  }
  protected:
  explicit create_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewRoomIdFieldNumber = 2,
    kErrorFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional int32 new_room_id = 2;
  bool has_new_room_id() const;
  private:
  bool _internal_has_new_room_id() const;
  public:
  void clear_new_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 new_room_id() const;
  void set_new_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_room_id() const;
  void _internal_set_new_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.error_id error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = create_room_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.create_room_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_room_id_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class dismiss_room_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.dismiss_room_req) */ {
 public:
  inline dismiss_room_req() : dismiss_room_req(nullptr) {}
  virtual ~dismiss_room_req();

  dismiss_room_req(const dismiss_room_req& from);
  dismiss_room_req(dismiss_room_req&& from) noexcept
    : dismiss_room_req() {
    *this = ::std::move(from);
  }

  inline dismiss_room_req& operator=(const dismiss_room_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline dismiss_room_req& operator=(dismiss_room_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dismiss_room_req& default_instance();

  static inline const dismiss_room_req* internal_default_instance() {
    return reinterpret_cast<const dismiss_room_req*>(
               &_dismiss_room_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(dismiss_room_req& a, dismiss_room_req& b) {
    a.Swap(&b);
  }
  inline void Swap(dismiss_room_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dismiss_room_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dismiss_room_req* New() const final {
    return CreateMaybeMessage<dismiss_room_req>(nullptr);
  }

  dismiss_room_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dismiss_room_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dismiss_room_req& from);
  void MergeFrom(const dismiss_room_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dismiss_room_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.dismiss_room_req";
  }
  protected:
  explicit dismiss_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = dismiss_room_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.dismiss_room_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class dismiss_room_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.dismiss_room_resp) */ {
 public:
  inline dismiss_room_resp() : dismiss_room_resp(nullptr) {}
  virtual ~dismiss_room_resp();

  dismiss_room_resp(const dismiss_room_resp& from);
  dismiss_room_resp(dismiss_room_resp&& from) noexcept
    : dismiss_room_resp() {
    *this = ::std::move(from);
  }

  inline dismiss_room_resp& operator=(const dismiss_room_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline dismiss_room_resp& operator=(dismiss_room_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dismiss_room_resp& default_instance();

  static inline const dismiss_room_resp* internal_default_instance() {
    return reinterpret_cast<const dismiss_room_resp*>(
               &_dismiss_room_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(dismiss_room_resp& a, dismiss_room_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(dismiss_room_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dismiss_room_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dismiss_room_resp* New() const final {
    return CreateMaybeMessage<dismiss_room_resp>(nullptr);
  }

  dismiss_room_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dismiss_room_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dismiss_room_resp& from);
  void MergeFrom(const dismiss_room_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dismiss_room_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.dismiss_room_resp";
  }
  protected:
  explicit dismiss_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = dismiss_room_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.dismiss_room_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class change_room_settings_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.change_room_settings_req) */ {
 public:
  inline change_room_settings_req() : change_room_settings_req(nullptr) {}
  virtual ~change_room_settings_req();

  change_room_settings_req(const change_room_settings_req& from);
  change_room_settings_req(change_room_settings_req&& from) noexcept
    : change_room_settings_req() {
    *this = ::std::move(from);
  }

  inline change_room_settings_req& operator=(const change_room_settings_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline change_room_settings_req& operator=(change_room_settings_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const change_room_settings_req& default_instance();

  static inline const change_room_settings_req* internal_default_instance() {
    return reinterpret_cast<const change_room_settings_req*>(
               &_change_room_settings_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(change_room_settings_req& a, change_room_settings_req& b) {
    a.Swap(&b);
  }
  inline void Swap(change_room_settings_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(change_room_settings_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline change_room_settings_req* New() const final {
    return CreateMaybeMessage<change_room_settings_req>(nullptr);
  }

  change_room_settings_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<change_room_settings_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const change_room_settings_req& from);
  void MergeFrom(const change_room_settings_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(change_room_settings_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.change_room_settings_req";
  }
  protected:
  explicit change_room_settings_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.room_settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::main::room_settings& settings() const;
  ::main::room_settings* release_settings();
  ::main::room_settings* mutable_settings();
  void set_allocated_settings(::main::room_settings* settings);
  private:
  const ::main::room_settings& _internal_settings() const;
  ::main::room_settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::main::room_settings* settings);
  ::main::room_settings* unsafe_arena_release_settings();

  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = change_room_settings_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.change_room_settings_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::main::room_settings* settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class change_room_settings_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.change_room_settings_resp) */ {
 public:
  inline change_room_settings_resp() : change_room_settings_resp(nullptr) {}
  virtual ~change_room_settings_resp();

  change_room_settings_resp(const change_room_settings_resp& from);
  change_room_settings_resp(change_room_settings_resp&& from) noexcept
    : change_room_settings_resp() {
    *this = ::std::move(from);
  }

  inline change_room_settings_resp& operator=(const change_room_settings_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline change_room_settings_resp& operator=(change_room_settings_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const change_room_settings_resp& default_instance();

  static inline const change_room_settings_resp* internal_default_instance() {
    return reinterpret_cast<const change_room_settings_resp*>(
               &_change_room_settings_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(change_room_settings_resp& a, change_room_settings_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(change_room_settings_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(change_room_settings_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline change_room_settings_resp* New() const final {
    return CreateMaybeMessage<change_room_settings_resp>(nullptr);
  }

  change_room_settings_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<change_room_settings_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const change_room_settings_resp& from);
  void MergeFrom(const change_room_settings_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(change_room_settings_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.change_room_settings_resp";
  }
  protected:
  explicit change_room_settings_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = change_room_settings_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.change_room_settings_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class change_room_settings_ntf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.change_room_settings_ntf) */ {
 public:
  inline change_room_settings_ntf() : change_room_settings_ntf(nullptr) {}
  virtual ~change_room_settings_ntf();

  change_room_settings_ntf(const change_room_settings_ntf& from);
  change_room_settings_ntf(change_room_settings_ntf&& from) noexcept
    : change_room_settings_ntf() {
    *this = ::std::move(from);
  }

  inline change_room_settings_ntf& operator=(const change_room_settings_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline change_room_settings_ntf& operator=(change_room_settings_ntf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const change_room_settings_ntf& default_instance();

  static inline const change_room_settings_ntf* internal_default_instance() {
    return reinterpret_cast<const change_room_settings_ntf*>(
               &_change_room_settings_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(change_room_settings_ntf& a, change_room_settings_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(change_room_settings_ntf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(change_room_settings_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline change_room_settings_ntf* New() const final {
    return CreateMaybeMessage<change_room_settings_ntf>(nullptr);
  }

  change_room_settings_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<change_room_settings_ntf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const change_room_settings_ntf& from);
  void MergeFrom(const change_room_settings_ntf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(change_room_settings_ntf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.change_room_settings_ntf";
  }
  protected:
  explicit change_room_settings_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.room_settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::main::room_settings& settings() const;
  ::main::room_settings* release_settings();
  ::main::room_settings* mutable_settings();
  void set_allocated_settings(::main::room_settings* settings);
  private:
  const ::main::room_settings& _internal_settings() const;
  ::main::room_settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::main::room_settings* settings);
  ::main::room_settings* unsafe_arena_release_settings();

  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = change_room_settings_ntf_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.change_room_settings_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::main::room_settings* settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class join_room_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.join_room_req) */ {
 public:
  inline join_room_req() : join_room_req(nullptr) {}
  virtual ~join_room_req();

  join_room_req(const join_room_req& from);
  join_room_req(join_room_req&& from) noexcept
    : join_room_req() {
    *this = ::std::move(from);
  }

  inline join_room_req& operator=(const join_room_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline join_room_req& operator=(join_room_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const join_room_req& default_instance();

  static inline const join_room_req* internal_default_instance() {
    return reinterpret_cast<const join_room_req*>(
               &_join_room_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(join_room_req& a, join_room_req& b) {
    a.Swap(&b);
  }
  inline void Swap(join_room_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(join_room_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline join_room_req* New() const final {
    return CreateMaybeMessage<join_room_req>(nullptr);
  }

  join_room_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<join_room_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const join_room_req& from);
  void MergeFrom(const join_room_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(join_room_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.join_room_req";
  }
  protected:
  explicit join_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.join_settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::main::join_settings& settings() const;
  ::main::join_settings* release_settings();
  ::main::join_settings* mutable_settings();
  void set_allocated_settings(::main::join_settings* settings);
  private:
  const ::main::join_settings& _internal_settings() const;
  ::main::join_settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::main::join_settings* settings);
  ::main::join_settings* unsafe_arena_release_settings();

  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = join_room_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.join_room_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::main::join_settings* settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class join_settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.join_settings) */ {
 public:
  inline join_settings() : join_settings(nullptr) {}
  virtual ~join_settings();

  join_settings(const join_settings& from);
  join_settings(join_settings&& from) noexcept
    : join_settings() {
    *this = ::std::move(from);
  }

  inline join_settings& operator=(const join_settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline join_settings& operator=(join_settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const join_settings& default_instance();

  static inline const join_settings* internal_default_instance() {
    return reinterpret_cast<const join_settings*>(
               &_join_settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(join_settings& a, join_settings& b) {
    a.Swap(&b);
  }
  inline void Swap(join_settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(join_settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline join_settings* New() const final {
    return CreateMaybeMessage<join_settings>(nullptr);
  }

  join_settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<join_settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const join_settings& from);
  void MergeFrom(const join_settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(join_settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.join_settings";
  }
  protected:
  explicit join_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinNameFieldNumber = 1,
  };
  // optional string join_name = 1;
  bool has_join_name() const;
  private:
  bool _internal_has_join_name() const;
  public:
  void clear_join_name();
  const std::string& join_name() const;
  void set_join_name(const std::string& value);
  void set_join_name(std::string&& value);
  void set_join_name(const char* value);
  void set_join_name(const char* value, size_t size);
  std::string* mutable_join_name();
  std::string* release_join_name();
  void set_allocated_join_name(std::string* join_name);
  private:
  const std::string& _internal_join_name() const;
  void _internal_set_join_name(const std::string& value);
  std::string* _internal_mutable_join_name();
  public:

  // @@protoc_insertion_point(class_scope:main.join_settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr join_name_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class join_room_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.join_room_resp) */ {
 public:
  inline join_room_resp() : join_room_resp(nullptr) {}
  virtual ~join_room_resp();

  join_room_resp(const join_room_resp& from);
  join_room_resp(join_room_resp&& from) noexcept
    : join_room_resp() {
    *this = ::std::move(from);
  }

  inline join_room_resp& operator=(const join_room_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline join_room_resp& operator=(join_room_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const join_room_resp& default_instance();

  static inline const join_room_resp* internal_default_instance() {
    return reinterpret_cast<const join_room_resp*>(
               &_join_room_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(join_room_resp& a, join_room_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(join_room_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(join_room_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline join_room_resp* New() const final {
    return CreateMaybeMessage<join_room_resp>(nullptr);
  }

  join_room_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<join_room_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const join_room_resp& from);
  void MergeFrom(const join_room_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(join_room_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.join_room_resp";
  }
  protected:
  explicit join_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = join_room_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.join_room_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class change_join_settings_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.change_join_settings_req) */ {
 public:
  inline change_join_settings_req() : change_join_settings_req(nullptr) {}
  virtual ~change_join_settings_req();

  change_join_settings_req(const change_join_settings_req& from);
  change_join_settings_req(change_join_settings_req&& from) noexcept
    : change_join_settings_req() {
    *this = ::std::move(from);
  }

  inline change_join_settings_req& operator=(const change_join_settings_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline change_join_settings_req& operator=(change_join_settings_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const change_join_settings_req& default_instance();

  static inline const change_join_settings_req* internal_default_instance() {
    return reinterpret_cast<const change_join_settings_req*>(
               &_change_join_settings_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(change_join_settings_req& a, change_join_settings_req& b) {
    a.Swap(&b);
  }
  inline void Swap(change_join_settings_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(change_join_settings_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline change_join_settings_req* New() const final {
    return CreateMaybeMessage<change_join_settings_req>(nullptr);
  }

  change_join_settings_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<change_join_settings_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const change_join_settings_req& from);
  void MergeFrom(const change_join_settings_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(change_join_settings_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.change_join_settings_req";
  }
  protected:
  explicit change_join_settings_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .main.join_settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::main::join_settings& settings() const;
  ::main::join_settings* release_settings();
  ::main::join_settings* mutable_settings();
  void set_allocated_settings(::main::join_settings* settings);
  private:
  const ::main::join_settings& _internal_settings() const;
  ::main::join_settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::main::join_settings* settings);
  ::main::join_settings* unsafe_arena_release_settings();

  // optional .main.proto_id id = 1 [default = change_join_settings_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.change_join_settings_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::main::join_settings* settings_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class change_join_settings_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.change_join_settings_resp) */ {
 public:
  inline change_join_settings_resp() : change_join_settings_resp(nullptr) {}
  virtual ~change_join_settings_resp();

  change_join_settings_resp(const change_join_settings_resp& from);
  change_join_settings_resp(change_join_settings_resp&& from) noexcept
    : change_join_settings_resp() {
    *this = ::std::move(from);
  }

  inline change_join_settings_resp& operator=(const change_join_settings_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline change_join_settings_resp& operator=(change_join_settings_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const change_join_settings_resp& default_instance();

  static inline const change_join_settings_resp* internal_default_instance() {
    return reinterpret_cast<const change_join_settings_resp*>(
               &_change_join_settings_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(change_join_settings_resp& a, change_join_settings_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(change_join_settings_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(change_join_settings_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline change_join_settings_resp* New() const final {
    return CreateMaybeMessage<change_join_settings_resp>(nullptr);
  }

  change_join_settings_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<change_join_settings_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const change_join_settings_resp& from);
  void MergeFrom(const change_join_settings_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(change_join_settings_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.change_join_settings_resp";
  }
  protected:
  explicit change_join_settings_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = change_join_settings_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.change_join_settings_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class send_info_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.send_info_req) */ {
 public:
  inline send_info_req() : send_info_req(nullptr) {}
  virtual ~send_info_req();

  send_info_req(const send_info_req& from);
  send_info_req(send_info_req&& from) noexcept
    : send_info_req() {
    *this = ::std::move(from);
  }

  inline send_info_req& operator=(const send_info_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_info_req& operator=(send_info_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const send_info_req& default_instance();

  static inline const send_info_req* internal_default_instance() {
    return reinterpret_cast<const send_info_req*>(
               &_send_info_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(send_info_req& a, send_info_req& b) {
    a.Swap(&b);
  }
  inline void Swap(send_info_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_info_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline send_info_req* New() const final {
    return CreateMaybeMessage<send_info_req>(nullptr);
  }

  send_info_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<send_info_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const send_info_req& from);
  void MergeFrom(const send_info_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_info_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.send_info_req";
  }
  protected:
  explicit send_info_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = send_info_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.send_info_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class send_info_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.send_info_resp) */ {
 public:
  inline send_info_resp() : send_info_resp(nullptr) {}
  virtual ~send_info_resp();

  send_info_resp(const send_info_resp& from);
  send_info_resp(send_info_resp&& from) noexcept
    : send_info_resp() {
    *this = ::std::move(from);
  }

  inline send_info_resp& operator=(const send_info_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_info_resp& operator=(send_info_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const send_info_resp& default_instance();

  static inline const send_info_resp* internal_default_instance() {
    return reinterpret_cast<const send_info_resp*>(
               &_send_info_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(send_info_resp& a, send_info_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(send_info_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_info_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline send_info_resp* New() const final {
    return CreateMaybeMessage<send_info_resp>(nullptr);
  }

  send_info_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<send_info_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const send_info_resp& from);
  void MergeFrom(const send_info_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_info_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.send_info_resp";
  }
  protected:
  explicit send_info_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = send_info_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.send_info_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class recv_info_ntf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.recv_info_ntf) */ {
 public:
  inline recv_info_ntf() : recv_info_ntf(nullptr) {}
  virtual ~recv_info_ntf();

  recv_info_ntf(const recv_info_ntf& from);
  recv_info_ntf(recv_info_ntf&& from) noexcept
    : recv_info_ntf() {
    *this = ::std::move(from);
  }

  inline recv_info_ntf& operator=(const recv_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline recv_info_ntf& operator=(recv_info_ntf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recv_info_ntf& default_instance();

  static inline const recv_info_ntf* internal_default_instance() {
    return reinterpret_cast<const recv_info_ntf*>(
               &_recv_info_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(recv_info_ntf& a, recv_info_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(recv_info_ntf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recv_info_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recv_info_ntf* New() const final {
    return CreateMaybeMessage<recv_info_ntf>(nullptr);
  }

  recv_info_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recv_info_ntf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recv_info_ntf& from);
  void MergeFrom(const recv_info_ntf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recv_info_ntf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.recv_info_ntf";
  }
  protected:
  explicit recv_info_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderNameFieldNumber = 3,
    kMsgFieldNumber = 4,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string sender_name = 3;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // optional string msg = 4;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = recv_info_ntf_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.recv_info_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class exit_room_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.exit_room_req) */ {
 public:
  inline exit_room_req() : exit_room_req(nullptr) {}
  virtual ~exit_room_req();

  exit_room_req(const exit_room_req& from);
  exit_room_req(exit_room_req&& from) noexcept
    : exit_room_req() {
    *this = ::std::move(from);
  }

  inline exit_room_req& operator=(const exit_room_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline exit_room_req& operator=(exit_room_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const exit_room_req& default_instance();

  static inline const exit_room_req* internal_default_instance() {
    return reinterpret_cast<const exit_room_req*>(
               &_exit_room_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(exit_room_req& a, exit_room_req& b) {
    a.Swap(&b);
  }
  inline void Swap(exit_room_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(exit_room_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline exit_room_req* New() const final {
    return CreateMaybeMessage<exit_room_req>(nullptr);
  }

  exit_room_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<exit_room_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const exit_room_req& from);
  void MergeFrom(const exit_room_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(exit_room_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.exit_room_req";
  }
  protected:
  explicit exit_room_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional int32 room_id = 2;
  bool has_room_id() const;
  private:
  bool _internal_has_room_id() const;
  public:
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .main.proto_id id = 1 [default = exit_room_req_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.exit_room_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_id_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class exit_room_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:main.exit_room_resp) */ {
 public:
  inline exit_room_resp() : exit_room_resp(nullptr) {}
  virtual ~exit_room_resp();

  exit_room_resp(const exit_room_resp& from);
  exit_room_resp(exit_room_resp&& from) noexcept
    : exit_room_resp() {
    *this = ::std::move(from);
  }

  inline exit_room_resp& operator=(const exit_room_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline exit_room_resp& operator=(exit_room_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const exit_room_resp& default_instance();

  static inline const exit_room_resp* internal_default_instance() {
    return reinterpret_cast<const exit_room_resp*>(
               &_exit_room_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(exit_room_resp& a, exit_room_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(exit_room_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(exit_room_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline exit_room_resp* New() const final {
    return CreateMaybeMessage<exit_room_resp>(nullptr);
  }

  exit_room_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<exit_room_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const exit_room_resp& from);
  void MergeFrom(const exit_room_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(exit_room_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.exit_room_resp";
  }
  protected:
  explicit exit_room_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cs_2eproto);
    return ::descriptor_table_cs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .main.error_id error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::main::error_id error() const;
  void set_error(::main::error_id value);
  private:
  ::main::error_id _internal_error() const;
  void _internal_set_error(::main::error_id value);
  public:

  // optional .main.proto_id id = 1 [default = exit_room_resp_id];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::main::proto_id id() const;
  void set_id(::main::proto_id value);
  private:
  ::main::proto_id _internal_id() const;
  void _internal_set_id(::main::proto_id value);
  public:

  // @@protoc_insertion_point(class_scope:main.exit_room_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int id_;
  friend struct ::TableStruct_cs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_req

// optional .main.proto_id id = 1 [default = login_req_id];
inline bool login_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool login_req::has_id() const {
  return _internal_has_id();
}
inline void login_req::clear_id() {
  id_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id login_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id login_req::id() const {
  // @@protoc_insertion_point(field_get:main.login_req.id)
  return _internal_id();
}
inline void login_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void login_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.login_req.id)
}

// optional string auth = 2;
inline bool login_req::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool login_req::has_auth() const {
  return _internal_has_auth();
}
inline void login_req::clear_auth() {
  auth_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_req::auth() const {
  // @@protoc_insertion_point(field_get:main.login_req.auth)
  return _internal_auth();
}
inline void login_req::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:main.login_req.auth)
}
inline std::string* login_req::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:main.login_req.auth)
  return _internal_mutable_auth();
}
inline const std::string& login_req::_internal_auth() const {
  return auth_.Get();
}
inline void login_req::_internal_set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_req::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.login_req.auth)
}
inline void login_req::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.login_req.auth)
}
inline void login_req::set_auth(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.login_req.auth)
}
inline std::string* login_req::_internal_mutable_auth() {
  _has_bits_[0] |= 0x00000001u;
  return auth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_req::release_auth() {
  // @@protoc_insertion_point(field_release:main.login_req.auth)
  if (!_internal_has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return auth_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_req::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.login_req.auth)
}

// -------------------------------------------------------------------

// login_resp

// optional .main.proto_id id = 1 [default = login_resp_id];
inline bool login_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool login_resp::has_id() const {
  return _internal_has_id();
}
inline void login_resp::clear_id() {
  id_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::main::proto_id login_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id login_resp::id() const {
  // @@protoc_insertion_point(field_get:main.login_resp.id)
  return _internal_id();
}
inline void login_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void login_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.login_resp.id)
}

// optional .main.error_id error = 2;
inline bool login_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool login_resp::has_error() const {
  return _internal_has_error();
}
inline void login_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::error_id login_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id login_resp::error() const {
  // @@protoc_insertion_point(field_get:main.login_resp.error)
  return _internal_error();
}
inline void login_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void login_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.login_resp.error)
}

// optional string auth = 3;
inline bool login_resp::_internal_has_auth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool login_resp::has_auth() const {
  return _internal_has_auth();
}
inline void login_resp::clear_auth() {
  auth_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_resp::auth() const {
  // @@protoc_insertion_point(field_get:main.login_resp.auth)
  return _internal_auth();
}
inline void login_resp::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:main.login_resp.auth)
}
inline std::string* login_resp::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:main.login_resp.auth)
  return _internal_mutable_auth();
}
inline const std::string& login_resp::_internal_auth() const {
  return auth_.Get();
}
inline void login_resp::_internal_set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void login_resp::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.login_resp.auth)
}
inline void login_resp::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.login_resp.auth)
}
inline void login_resp::set_auth(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.login_resp.auth)
}
inline std::string* login_resp::_internal_mutable_auth() {
  _has_bits_[0] |= 0x00000001u;
  return auth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* login_resp::release_auth() {
  // @@protoc_insertion_point(field_release:main.login_resp.auth)
  if (!_internal_has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return auth_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void login_resp::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.login_resp.auth)
}

// -------------------------------------------------------------------

// get_all_room_list_req

// optional .main.proto_id id = 1 [default = get_all_room_list_req_id];
inline bool get_all_room_list_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool get_all_room_list_req::has_id() const {
  return _internal_has_id();
}
inline void get_all_room_list_req::clear_id() {
  id_ = 1001;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::proto_id get_all_room_list_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id get_all_room_list_req::id() const {
  // @@protoc_insertion_point(field_get:main.get_all_room_list_req.id)
  return _internal_id();
}
inline void get_all_room_list_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void get_all_room_list_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.get_all_room_list_req.id)
}

// -------------------------------------------------------------------

// get_all_room_list_resp

// optional .main.proto_id id = 1 [default = get_all_room_list_resp_id];
inline bool get_all_room_list_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool get_all_room_list_resp::has_id() const {
  return _internal_has_id();
}
inline void get_all_room_list_resp::clear_id() {
  id_ = 1002;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::proto_id get_all_room_list_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id get_all_room_list_resp::id() const {
  // @@protoc_insertion_point(field_get:main.get_all_room_list_resp.id)
  return _internal_id();
}
inline void get_all_room_list_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void get_all_room_list_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.get_all_room_list_resp.id)
}

// repeated int32 room_ids = 2;
inline int get_all_room_list_resp::_internal_room_ids_size() const {
  return room_ids_.size();
}
inline int get_all_room_list_resp::room_ids_size() const {
  return _internal_room_ids_size();
}
inline void get_all_room_list_resp::clear_room_ids() {
  room_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_all_room_list_resp::_internal_room_ids(int index) const {
  return room_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_all_room_list_resp::room_ids(int index) const {
  // @@protoc_insertion_point(field_get:main.get_all_room_list_resp.room_ids)
  return _internal_room_ids(index);
}
inline void get_all_room_list_resp::set_room_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  room_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:main.get_all_room_list_resp.room_ids)
}
inline void get_all_room_list_resp::_internal_add_room_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  room_ids_.Add(value);
}
inline void get_all_room_list_resp::add_room_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_room_ids(value);
  // @@protoc_insertion_point(field_add:main.get_all_room_list_resp.room_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
get_all_room_list_resp::_internal_room_ids() const {
  return room_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
get_all_room_list_resp::room_ids() const {
  // @@protoc_insertion_point(field_list:main.get_all_room_list_resp.room_ids)
  return _internal_room_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
get_all_room_list_resp::_internal_mutable_room_ids() {
  return &room_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
get_all_room_list_resp::mutable_room_ids() {
  // @@protoc_insertion_point(field_mutable_list:main.get_all_room_list_resp.room_ids)
  return _internal_mutable_room_ids();
}

// -------------------------------------------------------------------

// create_room_req

// optional .main.proto_id id = 1 [default = create_room_req_id];
inline bool create_room_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool create_room_req::has_id() const {
  return _internal_has_id();
}
inline void create_room_req::clear_id() {
  id_ = 1003;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id create_room_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id create_room_req::id() const {
  // @@protoc_insertion_point(field_get:main.create_room_req.id)
  return _internal_id();
}
inline void create_room_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void create_room_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.create_room_req.id)
}

// optional .main.room_settings settings = 2;
inline bool create_room_req::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool create_room_req::has_settings() const {
  return _internal_has_settings();
}
inline void create_room_req::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::main::room_settings& create_room_req::_internal_settings() const {
  const ::main::room_settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::main::room_settings&>(
      ::main::_room_settings_default_instance_);
}
inline const ::main::room_settings& create_room_req::settings() const {
  // @@protoc_insertion_point(field_get:main.create_room_req.settings)
  return _internal_settings();
}
inline void create_room_req::unsafe_arena_set_allocated_settings(
    ::main::room_settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:main.create_room_req.settings)
}
inline ::main::room_settings* create_room_req::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::main::room_settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::main::room_settings* create_room_req::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:main.create_room_req.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::main::room_settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::main::room_settings* create_room_req::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::main::room_settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::main::room_settings* create_room_req::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:main.create_room_req.settings)
  return _internal_mutable_settings();
}
inline void create_room_req::set_allocated_settings(::main::room_settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:main.create_room_req.settings)
}

// -------------------------------------------------------------------

// room_settings

// optional string room_name = 1;
inline bool room_settings::_internal_has_room_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool room_settings::has_room_name() const {
  return _internal_has_room_name();
}
inline void room_settings::clear_room_name() {
  room_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& room_settings::room_name() const {
  // @@protoc_insertion_point(field_get:main.room_settings.room_name)
  return _internal_room_name();
}
inline void room_settings::set_room_name(const std::string& value) {
  _internal_set_room_name(value);
  // @@protoc_insertion_point(field_set:main.room_settings.room_name)
}
inline std::string* room_settings::mutable_room_name() {
  // @@protoc_insertion_point(field_mutable:main.room_settings.room_name)
  return _internal_mutable_room_name();
}
inline const std::string& room_settings::_internal_room_name() const {
  return room_name_.Get();
}
inline void room_settings::_internal_set_room_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void room_settings::set_room_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  room_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.room_settings.room_name)
}
inline void room_settings::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.room_settings.room_name)
}
inline void room_settings::set_room_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.room_settings.room_name)
}
inline std::string* room_settings::_internal_mutable_room_name() {
  _has_bits_[0] |= 0x00000001u;
  return room_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* room_settings::release_room_name() {
  // @@protoc_insertion_point(field_release:main.room_settings.room_name)
  if (!_internal_has_room_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return room_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void room_settings::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  room_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.room_settings.room_name)
}

// optional bool open = 2 [default = true];
inline bool room_settings::_internal_has_open() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool room_settings::has_open() const {
  return _internal_has_open();
}
inline void room_settings::clear_open() {
  open_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool room_settings::_internal_open() const {
  return open_;
}
inline bool room_settings::open() const {
  // @@protoc_insertion_point(field_get:main.room_settings.open)
  return _internal_open();
}
inline void room_settings::_internal_set_open(bool value) {
  _has_bits_[0] |= 0x00000002u;
  open_ = value;
}
inline void room_settings::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:main.room_settings.open)
}

// -------------------------------------------------------------------

// create_room_resp

// optional .main.proto_id id = 1 [default = create_room_resp_id];
inline bool create_room_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool create_room_resp::has_id() const {
  return _internal_has_id();
}
inline void create_room_resp::clear_id() {
  id_ = 1004;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::main::proto_id create_room_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id create_room_resp::id() const {
  // @@protoc_insertion_point(field_get:main.create_room_resp.id)
  return _internal_id();
}
inline void create_room_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void create_room_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.create_room_resp.id)
}

// optional int32 new_room_id = 2;
inline bool create_room_resp::_internal_has_new_room_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool create_room_resp::has_new_room_id() const {
  return _internal_has_new_room_id();
}
inline void create_room_resp::clear_new_room_id() {
  new_room_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_room_resp::_internal_new_room_id() const {
  return new_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_room_resp::new_room_id() const {
  // @@protoc_insertion_point(field_get:main.create_room_resp.new_room_id)
  return _internal_new_room_id();
}
inline void create_room_resp::_internal_set_new_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  new_room_id_ = value;
}
inline void create_room_resp::set_new_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_room_id(value);
  // @@protoc_insertion_point(field_set:main.create_room_resp.new_room_id)
}

// optional .main.error_id error = 3;
inline bool create_room_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool create_room_resp::has_error() const {
  return _internal_has_error();
}
inline void create_room_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::error_id create_room_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id create_room_resp::error() const {
  // @@protoc_insertion_point(field_get:main.create_room_resp.error)
  return _internal_error();
}
inline void create_room_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void create_room_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.create_room_resp.error)
}

// -------------------------------------------------------------------

// dismiss_room_req

// optional .main.proto_id id = 1 [default = dismiss_room_req_id];
inline bool dismiss_room_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dismiss_room_req::has_id() const {
  return _internal_has_id();
}
inline void dismiss_room_req::clear_id() {
  id_ = 1005;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id dismiss_room_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id dismiss_room_req::id() const {
  // @@protoc_insertion_point(field_get:main.dismiss_room_req.id)
  return _internal_id();
}
inline void dismiss_room_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void dismiss_room_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.dismiss_room_req.id)
}

// optional int32 room_id = 2;
inline bool dismiss_room_req::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dismiss_room_req::has_room_id() const {
  return _internal_has_room_id();
}
inline void dismiss_room_req::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dismiss_room_req::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dismiss_room_req::room_id() const {
  // @@protoc_insertion_point(field_get:main.dismiss_room_req.room_id)
  return _internal_room_id();
}
inline void dismiss_room_req::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  room_id_ = value;
}
inline void dismiss_room_req::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.dismiss_room_req.room_id)
}

// -------------------------------------------------------------------

// dismiss_room_resp

// optional .main.proto_id id = 1 [default = dismiss_room_resp_id];
inline bool dismiss_room_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dismiss_room_resp::has_id() const {
  return _internal_has_id();
}
inline void dismiss_room_resp::clear_id() {
  id_ = 1006;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id dismiss_room_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id dismiss_room_resp::id() const {
  // @@protoc_insertion_point(field_get:main.dismiss_room_resp.id)
  return _internal_id();
}
inline void dismiss_room_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void dismiss_room_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.dismiss_room_resp.id)
}

// optional .main.error_id error = 2;
inline bool dismiss_room_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dismiss_room_resp::has_error() const {
  return _internal_has_error();
}
inline void dismiss_room_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::error_id dismiss_room_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id dismiss_room_resp::error() const {
  // @@protoc_insertion_point(field_get:main.dismiss_room_resp.error)
  return _internal_error();
}
inline void dismiss_room_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void dismiss_room_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.dismiss_room_resp.error)
}

// -------------------------------------------------------------------

// change_room_settings_req

// optional .main.proto_id id = 1 [default = change_room_settings_req_id];
inline bool change_room_settings_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool change_room_settings_req::has_id() const {
  return _internal_has_id();
}
inline void change_room_settings_req::clear_id() {
  id_ = 1007;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::main::proto_id change_room_settings_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id change_room_settings_req::id() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_req.id)
  return _internal_id();
}
inline void change_room_settings_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void change_room_settings_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.change_room_settings_req.id)
}

// optional int32 room_id = 2;
inline bool change_room_settings_req::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool change_room_settings_req::has_room_id() const {
  return _internal_has_room_id();
}
inline void change_room_settings_req::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 change_room_settings_req::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 change_room_settings_req::room_id() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_req.room_id)
  return _internal_room_id();
}
inline void change_room_settings_req::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  room_id_ = value;
}
inline void change_room_settings_req::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.change_room_settings_req.room_id)
}

// optional .main.room_settings settings = 3;
inline bool change_room_settings_req::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool change_room_settings_req::has_settings() const {
  return _internal_has_settings();
}
inline void change_room_settings_req::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::main::room_settings& change_room_settings_req::_internal_settings() const {
  const ::main::room_settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::main::room_settings&>(
      ::main::_room_settings_default_instance_);
}
inline const ::main::room_settings& change_room_settings_req::settings() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_req.settings)
  return _internal_settings();
}
inline void change_room_settings_req::unsafe_arena_set_allocated_settings(
    ::main::room_settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:main.change_room_settings_req.settings)
}
inline ::main::room_settings* change_room_settings_req::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::main::room_settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::main::room_settings* change_room_settings_req::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:main.change_room_settings_req.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::main::room_settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::main::room_settings* change_room_settings_req::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::main::room_settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::main::room_settings* change_room_settings_req::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:main.change_room_settings_req.settings)
  return _internal_mutable_settings();
}
inline void change_room_settings_req::set_allocated_settings(::main::room_settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:main.change_room_settings_req.settings)
}

// -------------------------------------------------------------------

// change_room_settings_resp

// optional .main.proto_id id = 1 [default = change_room_settings_resp_id];
inline bool change_room_settings_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool change_room_settings_resp::has_id() const {
  return _internal_has_id();
}
inline void change_room_settings_resp::clear_id() {
  id_ = 1008;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id change_room_settings_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id change_room_settings_resp::id() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_resp.id)
  return _internal_id();
}
inline void change_room_settings_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void change_room_settings_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.change_room_settings_resp.id)
}

// optional .main.error_id error = 2;
inline bool change_room_settings_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool change_room_settings_resp::has_error() const {
  return _internal_has_error();
}
inline void change_room_settings_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::error_id change_room_settings_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id change_room_settings_resp::error() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_resp.error)
  return _internal_error();
}
inline void change_room_settings_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void change_room_settings_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.change_room_settings_resp.error)
}

// -------------------------------------------------------------------

// change_room_settings_ntf

// optional .main.proto_id id = 1 [default = change_room_settings_ntf_id];
inline bool change_room_settings_ntf::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool change_room_settings_ntf::has_id() const {
  return _internal_has_id();
}
inline void change_room_settings_ntf::clear_id() {
  id_ = 1009;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::main::proto_id change_room_settings_ntf::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id change_room_settings_ntf::id() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_ntf.id)
  return _internal_id();
}
inline void change_room_settings_ntf::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void change_room_settings_ntf::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.change_room_settings_ntf.id)
}

// optional int32 room_id = 2;
inline bool change_room_settings_ntf::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool change_room_settings_ntf::has_room_id() const {
  return _internal_has_room_id();
}
inline void change_room_settings_ntf::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 change_room_settings_ntf::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 change_room_settings_ntf::room_id() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_ntf.room_id)
  return _internal_room_id();
}
inline void change_room_settings_ntf::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  room_id_ = value;
}
inline void change_room_settings_ntf::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.change_room_settings_ntf.room_id)
}

// optional .main.room_settings settings = 3;
inline bool change_room_settings_ntf::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool change_room_settings_ntf::has_settings() const {
  return _internal_has_settings();
}
inline void change_room_settings_ntf::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::main::room_settings& change_room_settings_ntf::_internal_settings() const {
  const ::main::room_settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::main::room_settings&>(
      ::main::_room_settings_default_instance_);
}
inline const ::main::room_settings& change_room_settings_ntf::settings() const {
  // @@protoc_insertion_point(field_get:main.change_room_settings_ntf.settings)
  return _internal_settings();
}
inline void change_room_settings_ntf::unsafe_arena_set_allocated_settings(
    ::main::room_settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:main.change_room_settings_ntf.settings)
}
inline ::main::room_settings* change_room_settings_ntf::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::main::room_settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::main::room_settings* change_room_settings_ntf::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:main.change_room_settings_ntf.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::main::room_settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::main::room_settings* change_room_settings_ntf::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::main::room_settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::main::room_settings* change_room_settings_ntf::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:main.change_room_settings_ntf.settings)
  return _internal_mutable_settings();
}
inline void change_room_settings_ntf::set_allocated_settings(::main::room_settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:main.change_room_settings_ntf.settings)
}

// -------------------------------------------------------------------

// join_room_req

// optional .main.proto_id id = 1 [default = join_room_req_id];
inline bool join_room_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool join_room_req::has_id() const {
  return _internal_has_id();
}
inline void join_room_req::clear_id() {
  id_ = 2001;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::main::proto_id join_room_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id join_room_req::id() const {
  // @@protoc_insertion_point(field_get:main.join_room_req.id)
  return _internal_id();
}
inline void join_room_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void join_room_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.join_room_req.id)
}

// optional int32 room_id = 2;
inline bool join_room_req::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool join_room_req::has_room_id() const {
  return _internal_has_room_id();
}
inline void join_room_req::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 join_room_req::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 join_room_req::room_id() const {
  // @@protoc_insertion_point(field_get:main.join_room_req.room_id)
  return _internal_room_id();
}
inline void join_room_req::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  room_id_ = value;
}
inline void join_room_req::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.join_room_req.room_id)
}

// optional .main.join_settings settings = 3;
inline bool join_room_req::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool join_room_req::has_settings() const {
  return _internal_has_settings();
}
inline void join_room_req::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::main::join_settings& join_room_req::_internal_settings() const {
  const ::main::join_settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::main::join_settings&>(
      ::main::_join_settings_default_instance_);
}
inline const ::main::join_settings& join_room_req::settings() const {
  // @@protoc_insertion_point(field_get:main.join_room_req.settings)
  return _internal_settings();
}
inline void join_room_req::unsafe_arena_set_allocated_settings(
    ::main::join_settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:main.join_room_req.settings)
}
inline ::main::join_settings* join_room_req::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::main::join_settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::main::join_settings* join_room_req::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:main.join_room_req.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::main::join_settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::main::join_settings* join_room_req::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::main::join_settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::main::join_settings* join_room_req::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:main.join_room_req.settings)
  return _internal_mutable_settings();
}
inline void join_room_req::set_allocated_settings(::main::join_settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:main.join_room_req.settings)
}

// -------------------------------------------------------------------

// join_settings

// optional string join_name = 1;
inline bool join_settings::_internal_has_join_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool join_settings::has_join_name() const {
  return _internal_has_join_name();
}
inline void join_settings::clear_join_name() {
  join_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& join_settings::join_name() const {
  // @@protoc_insertion_point(field_get:main.join_settings.join_name)
  return _internal_join_name();
}
inline void join_settings::set_join_name(const std::string& value) {
  _internal_set_join_name(value);
  // @@protoc_insertion_point(field_set:main.join_settings.join_name)
}
inline std::string* join_settings::mutable_join_name() {
  // @@protoc_insertion_point(field_mutable:main.join_settings.join_name)
  return _internal_mutable_join_name();
}
inline const std::string& join_settings::_internal_join_name() const {
  return join_name_.Get();
}
inline void join_settings::_internal_set_join_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  join_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void join_settings::set_join_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  join_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.join_settings.join_name)
}
inline void join_settings::set_join_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  join_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.join_settings.join_name)
}
inline void join_settings::set_join_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  join_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.join_settings.join_name)
}
inline std::string* join_settings::_internal_mutable_join_name() {
  _has_bits_[0] |= 0x00000001u;
  return join_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* join_settings::release_join_name() {
  // @@protoc_insertion_point(field_release:main.join_settings.join_name)
  if (!_internal_has_join_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return join_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void join_settings::set_allocated_join_name(std::string* join_name) {
  if (join_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  join_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), join_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.join_settings.join_name)
}

// -------------------------------------------------------------------

// join_room_resp

// optional .main.proto_id id = 1 [default = join_room_resp_id];
inline bool join_room_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool join_room_resp::has_id() const {
  return _internal_has_id();
}
inline void join_room_resp::clear_id() {
  id_ = 2002;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id join_room_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id join_room_resp::id() const {
  // @@protoc_insertion_point(field_get:main.join_room_resp.id)
  return _internal_id();
}
inline void join_room_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void join_room_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.join_room_resp.id)
}

// optional .main.error_id error = 2;
inline bool join_room_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool join_room_resp::has_error() const {
  return _internal_has_error();
}
inline void join_room_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::error_id join_room_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id join_room_resp::error() const {
  // @@protoc_insertion_point(field_get:main.join_room_resp.error)
  return _internal_error();
}
inline void join_room_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void join_room_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.join_room_resp.error)
}

// -------------------------------------------------------------------

// change_join_settings_req

// optional .main.proto_id id = 1 [default = change_join_settings_req_id];
inline bool change_join_settings_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool change_join_settings_req::has_id() const {
  return _internal_has_id();
}
inline void change_join_settings_req::clear_id() {
  id_ = 2003;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id change_join_settings_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id change_join_settings_req::id() const {
  // @@protoc_insertion_point(field_get:main.change_join_settings_req.id)
  return _internal_id();
}
inline void change_join_settings_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void change_join_settings_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.change_join_settings_req.id)
}

// optional .main.join_settings settings = 3;
inline bool change_join_settings_req::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool change_join_settings_req::has_settings() const {
  return _internal_has_settings();
}
inline void change_join_settings_req::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::main::join_settings& change_join_settings_req::_internal_settings() const {
  const ::main::join_settings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::main::join_settings&>(
      ::main::_join_settings_default_instance_);
}
inline const ::main::join_settings& change_join_settings_req::settings() const {
  // @@protoc_insertion_point(field_get:main.change_join_settings_req.settings)
  return _internal_settings();
}
inline void change_join_settings_req::unsafe_arena_set_allocated_settings(
    ::main::join_settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:main.change_join_settings_req.settings)
}
inline ::main::join_settings* change_join_settings_req::release_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::main::join_settings* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::main::join_settings* change_join_settings_req::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:main.change_join_settings_req.settings)
  _has_bits_[0] &= ~0x00000001u;
  ::main::join_settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::main::join_settings* change_join_settings_req::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::main::join_settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::main::join_settings* change_join_settings_req::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:main.change_join_settings_req.settings)
  return _internal_mutable_settings();
}
inline void change_join_settings_req::set_allocated_settings(::main::join_settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:main.change_join_settings_req.settings)
}

// -------------------------------------------------------------------

// change_join_settings_resp

// optional .main.proto_id id = 1 [default = change_join_settings_resp_id];
inline bool change_join_settings_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool change_join_settings_resp::has_id() const {
  return _internal_has_id();
}
inline void change_join_settings_resp::clear_id() {
  id_ = 2004;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id change_join_settings_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id change_join_settings_resp::id() const {
  // @@protoc_insertion_point(field_get:main.change_join_settings_resp.id)
  return _internal_id();
}
inline void change_join_settings_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void change_join_settings_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.change_join_settings_resp.id)
}

// optional .main.error_id error = 2;
inline bool change_join_settings_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool change_join_settings_resp::has_error() const {
  return _internal_has_error();
}
inline void change_join_settings_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::error_id change_join_settings_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id change_join_settings_resp::error() const {
  // @@protoc_insertion_point(field_get:main.change_join_settings_resp.error)
  return _internal_error();
}
inline void change_join_settings_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void change_join_settings_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.change_join_settings_resp.error)
}

// -------------------------------------------------------------------

// send_info_req

// optional .main.proto_id id = 1 [default = send_info_req_id];
inline bool send_info_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool send_info_req::has_id() const {
  return _internal_has_id();
}
inline void send_info_req::clear_id() {
  id_ = 2005;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::main::proto_id send_info_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id send_info_req::id() const {
  // @@protoc_insertion_point(field_get:main.send_info_req.id)
  return _internal_id();
}
inline void send_info_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void send_info_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.send_info_req.id)
}

// optional int32 room_id = 2;
inline bool send_info_req::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool send_info_req::has_room_id() const {
  return _internal_has_room_id();
}
inline void send_info_req::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 send_info_req::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 send_info_req::room_id() const {
  // @@protoc_insertion_point(field_get:main.send_info_req.room_id)
  return _internal_room_id();
}
inline void send_info_req::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  room_id_ = value;
}
inline void send_info_req::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.send_info_req.room_id)
}

// optional string info = 3;
inline bool send_info_req::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool send_info_req::has_info() const {
  return _internal_has_info();
}
inline void send_info_req::clear_info() {
  info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& send_info_req::info() const {
  // @@protoc_insertion_point(field_get:main.send_info_req.info)
  return _internal_info();
}
inline void send_info_req::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:main.send_info_req.info)
}
inline std::string* send_info_req::mutable_info() {
  // @@protoc_insertion_point(field_mutable:main.send_info_req.info)
  return _internal_mutable_info();
}
inline const std::string& send_info_req::_internal_info() const {
  return info_.Get();
}
inline void send_info_req::_internal_set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void send_info_req::set_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.send_info_req.info)
}
inline void send_info_req::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.send_info_req.info)
}
inline void send_info_req::set_info(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.send_info_req.info)
}
inline std::string* send_info_req::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* send_info_req::release_info() {
  // @@protoc_insertion_point(field_release:main.send_info_req.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void send_info_req::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.send_info_req.info)
}

// -------------------------------------------------------------------

// send_info_resp

// optional .main.proto_id id = 1 [default = send_info_resp_id];
inline bool send_info_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool send_info_resp::has_id() const {
  return _internal_has_id();
}
inline void send_info_resp::clear_id() {
  id_ = 2006;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id send_info_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id send_info_resp::id() const {
  // @@protoc_insertion_point(field_get:main.send_info_resp.id)
  return _internal_id();
}
inline void send_info_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void send_info_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.send_info_resp.id)
}

// optional .main.error_id error = 2;
inline bool send_info_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool send_info_resp::has_error() const {
  return _internal_has_error();
}
inline void send_info_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::error_id send_info_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id send_info_resp::error() const {
  // @@protoc_insertion_point(field_get:main.send_info_resp.error)
  return _internal_error();
}
inline void send_info_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void send_info_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.send_info_resp.error)
}

// -------------------------------------------------------------------

// recv_info_ntf

// optional .main.proto_id id = 1 [default = recv_info_ntf_id];
inline bool recv_info_ntf::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool recv_info_ntf::has_id() const {
  return _internal_has_id();
}
inline void recv_info_ntf::clear_id() {
  id_ = 2007;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::main::proto_id recv_info_ntf::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id recv_info_ntf::id() const {
  // @@protoc_insertion_point(field_get:main.recv_info_ntf.id)
  return _internal_id();
}
inline void recv_info_ntf::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void recv_info_ntf::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.recv_info_ntf.id)
}

// optional int32 room_id = 2;
inline bool recv_info_ntf::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool recv_info_ntf::has_room_id() const {
  return _internal_has_room_id();
}
inline void recv_info_ntf::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recv_info_ntf::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 recv_info_ntf::room_id() const {
  // @@protoc_insertion_point(field_get:main.recv_info_ntf.room_id)
  return _internal_room_id();
}
inline void recv_info_ntf::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  room_id_ = value;
}
inline void recv_info_ntf::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.recv_info_ntf.room_id)
}

// optional string sender_name = 3;
inline bool recv_info_ntf::_internal_has_sender_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool recv_info_ntf::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void recv_info_ntf::clear_sender_name() {
  sender_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& recv_info_ntf::sender_name() const {
  // @@protoc_insertion_point(field_get:main.recv_info_ntf.sender_name)
  return _internal_sender_name();
}
inline void recv_info_ntf::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:main.recv_info_ntf.sender_name)
}
inline std::string* recv_info_ntf::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:main.recv_info_ntf.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& recv_info_ntf::_internal_sender_name() const {
  return sender_name_.Get();
}
inline void recv_info_ntf::_internal_set_sender_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recv_info_ntf::set_sender_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.recv_info_ntf.sender_name)
}
inline void recv_info_ntf::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.recv_info_ntf.sender_name)
}
inline void recv_info_ntf::set_sender_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.recv_info_ntf.sender_name)
}
inline std::string* recv_info_ntf::_internal_mutable_sender_name() {
  _has_bits_[0] |= 0x00000001u;
  return sender_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recv_info_ntf::release_sender_name() {
  // @@protoc_insertion_point(field_release:main.recv_info_ntf.sender_name)
  if (!_internal_has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recv_info_ntf::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.recv_info_ntf.sender_name)
}

// optional string msg = 4;
inline bool recv_info_ntf::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool recv_info_ntf::has_msg() const {
  return _internal_has_msg();
}
inline void recv_info_ntf::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& recv_info_ntf::msg() const {
  // @@protoc_insertion_point(field_get:main.recv_info_ntf.msg)
  return _internal_msg();
}
inline void recv_info_ntf::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:main.recv_info_ntf.msg)
}
inline std::string* recv_info_ntf::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:main.recv_info_ntf.msg)
  return _internal_mutable_msg();
}
inline const std::string& recv_info_ntf::_internal_msg() const {
  return msg_.Get();
}
inline void recv_info_ntf::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recv_info_ntf::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.recv_info_ntf.msg)
}
inline void recv_info_ntf::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.recv_info_ntf.msg)
}
inline void recv_info_ntf::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.recv_info_ntf.msg)
}
inline std::string* recv_info_ntf::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000002u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recv_info_ntf::release_msg() {
  // @@protoc_insertion_point(field_release:main.recv_info_ntf.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recv_info_ntf::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.recv_info_ntf.msg)
}

// -------------------------------------------------------------------

// exit_room_req

// optional .main.proto_id id = 1 [default = exit_room_req_id];
inline bool exit_room_req::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool exit_room_req::has_id() const {
  return _internal_has_id();
}
inline void exit_room_req::clear_id() {
  id_ = 2008;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id exit_room_req::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id exit_room_req::id() const {
  // @@protoc_insertion_point(field_get:main.exit_room_req.id)
  return _internal_id();
}
inline void exit_room_req::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void exit_room_req::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.exit_room_req.id)
}

// optional int32 room_id = 2;
inline bool exit_room_req::_internal_has_room_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool exit_room_req::has_room_id() const {
  return _internal_has_room_id();
}
inline void exit_room_req::clear_room_id() {
  room_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 exit_room_req::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 exit_room_req::room_id() const {
  // @@protoc_insertion_point(field_get:main.exit_room_req.room_id)
  return _internal_room_id();
}
inline void exit_room_req::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  room_id_ = value;
}
inline void exit_room_req::set_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:main.exit_room_req.room_id)
}

// -------------------------------------------------------------------

// exit_room_resp

// optional .main.proto_id id = 1 [default = exit_room_resp_id];
inline bool exit_room_resp::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool exit_room_resp::has_id() const {
  return _internal_has_id();
}
inline void exit_room_resp::clear_id() {
  id_ = 2009;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::main::proto_id exit_room_resp::_internal_id() const {
  return static_cast< ::main::proto_id >(id_);
}
inline ::main::proto_id exit_room_resp::id() const {
  // @@protoc_insertion_point(field_get:main.exit_room_resp.id)
  return _internal_id();
}
inline void exit_room_resp::_internal_set_id(::main::proto_id value) {
  assert(::main::proto_id_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void exit_room_resp::set_id(::main::proto_id value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:main.exit_room_resp.id)
}

// optional .main.error_id error = 2;
inline bool exit_room_resp::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool exit_room_resp::has_error() const {
  return _internal_has_error();
}
inline void exit_room_resp::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::main::error_id exit_room_resp::_internal_error() const {
  return static_cast< ::main::error_id >(error_);
}
inline ::main::error_id exit_room_resp::error() const {
  // @@protoc_insertion_point(field_get:main.exit_room_resp.error)
  return _internal_error();
}
inline void exit_room_resp::_internal_set_error(::main::error_id value) {
  assert(::main::error_id_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void exit_room_resp::set_error(::main::error_id value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:main.exit_room_resp.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::main::proto_id> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::main::proto_id>() {
  return ::main::proto_id_descriptor();
}
template <> struct is_proto_enum< ::main::error_id> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::main::error_id>() {
  return ::main::error_id_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_2eproto
